<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd" [
  <!ENTITY css "<acronym>CSS</acronym>">
  <!ENTITY css2 "<acronym>CSS2</acronym>">
  <!ENTITY css3 "<acronym>CSS3</acronym>">
  <!ENTITY csstoxslfo "<acronym>CSSToXSLFO</acronym>">
  <!ENTITY fop "<acronym>FOP</acronym>">
  <!ENTITY html "<acronym>HTML</acronym>">
  <!ENTITY id "<acronym>ID</acronym>">
  <!ENTITY jar "<acronym>JAR</acronym>">
  <!ENTITY names "<acronym>NAMES</acronym>">
  <!ENTITY pdf "<acronym>PDF</acronym>">
  <!ENTITY sax "<acronym>SAX</acronym>">
  <!ENTITY svg "<acronym>SVG</acronym>">
  <!ENTITY xep "<acronym>XEP</acronym>">
  <!ENTITY xep4 "<acronym>XEP4</acronym>">
  <!ENTITY xhtml "<acronym>XHTML</acronym>">
  <!ENTITY xinc "<acronym>XINC</acronym>">
  <!ENTITY xml "<acronym>XML</acronym>">
  <!ENTITY xslfo "<acronym>XSL-FO</acronym>">
  <!ENTITY xslt "<acronym>XSLT</acronym>">
  <!ENTITY uri "<acronym>URI</acronym>">
  <!ENTITY url "<acronym>URL</acronym>">
]>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>The CSSToXSLFO User Guide</title>
    <link type="text/css" media="print" rel="stylesheet" href="xhtml_report.css" />
    <style type="text/css" xml:space="preserve">
table
{
  border-collapse: collapse;
  table-layout: fixed;
  width: 100%;
}

table table
{
  margin-bottom: 0;
  margin-top: 0;
}

table.property tr > td:first-child
{
  font-style: italic;
}

table.property tr > td
{
  padding: 0pt;
}

td
{
  padding: 5pt;
  vertical-align: top;
}

th
{
  font-style: italic;
  font-weight: normal;
  padding: 5pt;
  text-align: left;
}

table.specifications td:first-child, table.specifications th:first-child,
table.ant-tasks td:first-child, table.ant-tasks th:first-child,
table.task-attributes td:first-child, table.task-attributes th:first-child
{
  padding-left: 0pt;
}

table.specifications td + td + td, table.specifications th + th + th,
table.ant-tasks td + td, table.ant-tasks th + th,
table.task-attributes td + td + td, table.task-attributes th + th + th
{
  padding-right: 0pt;
}

div.method
{
  font-style: italic;
  margin-bottom: 1.2em;
  margin-top: 1.2em;
  page-break-inside: avoid;
}

div.method > div.p
{
  padding-left: 1em;
}

@media screen
{
  *:link
  {
    color: #982936;
  }

  *:visited
  {
    color: purple;
  }

  body
  {
    background: white;
    font-family: sans-serif;
  }

  div.bottom, div.top, div.doc-info, div.title-page, div.copy-right
  {
    display: none;
  }

  div.h1
  {
    margin: 0.67em 0;
    text-align: center;
  }

  div.h2
  {
    margin-bottom: 0.83em;
    margin-left: 0;
    margin-right: 0;
    margin-top: 2em;
  }

  div.h3
  {
    margin-bottom: 1em;
    margin-left: 0;
    margin-right: 0;
    margin-top: 1.8em;
  }

  div.h1, div.h2, div.h3
  {
    border-bottom: solid 0.4pt;
    color: #982936;
    width: 100%;
  }

  div.h2 h2
  {
    font-style: italic;
    font-size: 1.3em;
  }

  div.h3 h3
  {
    font-style: italic;
    font-size: 1.1em;
  }

  div.h1 h1, div.h2 h2, div.h3 h3
  {
    display: inline;
    font-weight: normal;
    color: white;
    background-color: #982936;
    margin: 0;
    padding-left: 5pt;
    padding-right: 5pt;
    padding-top: 2pt;
  }

  div.toc-h1
  {
    margin-left: 1em;
  }

  div.toc-h2
  {
    margin-left: 2em;
  }

  div.toc-h3
  {
    margin-left: 3em;
  }

  div.text
  {
    margin-left: 5em;
  }

  div.title-screen
  {
    font-size: 2em;
    font-weight: bold;
  }

  hr
  {
    border-bottom: none;
    border-left: none;
    border-right: none;
    border-top: 0.2pt solid;
  }

  table
  {
    margin-bottom: 0.83em;
    margin-top: 0.83em;
  }
}

@media print
{
  div.blank
  {
    page: blank;
  }

  div.bottom
  {
    height: 3em;
    padding-top: 2em;
    region: bottom;
  }

  div.bottom > span:before
  {
    content: counter(page);
  }

  div.copy-right
  {
    page: copy-right;
  }

  div.first
  {
    page: first;
  }

  div.front
  {
    page: front;
  }

  div.front.left
  {
    page: left-front;
  }

  div.front.right
  {
    page: right-front;
  }

  div.front.bottom > span:before
  {
    content: counter(page, lower-roman);
  }

  div.left
  {
    page: left;
    text-align: left;
  }

  div.right
  {
    page: right;
    text-align: right;
  }

  div.title.first
  {
    page: first-title;
  }

  div.copy-right.first
  {
    page: first-copy-right;
  }

  div.top
  {
    font-family: serif-title;
    font-style: italic;
    height: 4em;
    region: top;
  }

  div.top > span:before
  {
    content: string(chapter);
  }

  div.copy-right > p
  {
    text-indent: 0pt;
  }

  div.back, div.main, div.toc-back, div.toc-main
  {
    counter-reset: h1;
  }

  div.title-screen
  {
    display: none;
  }

  div.title-page
  {
    page: title;
  }

  div.title-page > div.doc-info
  {
    border-right: solid 0.2pt;
    display: block;
    font-size: 12pt;
    padding-right: 5mm;
    text-align: right;
  }

  div.title-page > div.title-area
  {
    border-left: solid 0.2pt;
    padding-left: 5mm;
  }

  div.title-page > div.title-area > div
  {
    font-size: 21pt;
  }

  div.title-page > div.title-area > div.title-main
  {
    font-size: 36pt;
    font-style: italic;
    font-weight: normal;
    margin-bottom: 1em;
    margin-top: 1em;
  }

  h1, div.toc-h1
  {
    counter-increment: h1;
    counter-reset: footnote h2;
  }

  div.back > h1
  {
    page: back;
  }

  div.main > h1
  {
    page: main;
  }

  div.main > h1:first-child
  {
    page: main-first;
  }

  div.main h2:before, div.main h3:before,
  div.back h2:before, div.back h3:before
  {
    padding-right: 1em;
  }

  div.toc-h1:before, div.toc-h2:before, div.toc-h3:before
  {
    display: marker;
    marker-offset: 12pt;
    text-align: right;
    width: 4em;
  }

  h1
  {
    margin-bottom: 2.4em;
    text-align-last: justify;
  }

  h1 > span:before
  {
    display: leader;
  }

  h1 > span:after
  {
    font-family: serif-title;
    font-size: 3em; /* Results in 4.8 */
    font-style: italic;
    text-transform: uppercase;
  }

  div.main h1 > span:after, div.toc-main > div.toc-h1:before
  {
    content: counter(h1);
  }

  div.back h1 > span:after, div.toc-back > div.toc-h1:before
  {
    content: counter(h1, upper-alpha);
  }

  h2, div.toc-h2
  {
    counter-increment: h2;
    counter-reset: h3;
  }

  div.main h2:before, div.toc-main &gt; div.toc-h2:before
  {
    content: counter(h1) "." counter(h2);
  }

  div.main h2.example:before
  {
    display: marker;
    marker-offset: 0.5em;
    padding-right: 0pt;
    text-align: right;
    width: 3em;
  }

  div.back h2:before, div.toc-back > div.toc-h2:before
  {
    content: counter(h1, upper-alpha) "." counter(h2);
  }

  h3, div.toc-h3
  {
    counter-increment: h3;
  }

  div.main h3:before, div.toc-main > div.toc-h3:before
  {
    content: counter(h1) "." counter(h2) "." counter(h3);
  }

  div.back h3:before, div.toc-back > div.toc-h3:before
  {
    content: counter(h1, upper-alpha) "." counter(h2) "." counter(h3);
  }

  div.toc span.leader
  {
    display: none;
  }

  div.toc span.page-ref
  {
    padding-left: 2em;
  }

  div.toc-h1 > a, div.toc-h2 > a, div.toc-h3 > a
  {
    font-family: serif-title;
  }

  ol.example
  {
    counter-reset: list-counter;
  }

  ol.example li
  {
    margin-left: 2em;
  }

  ol.example li:before
  {
    content: counter(list-counter, lower-roman) ".";
    counter-increment: list-counter;
    display: marker;
    marker-offset: 0.5em;
    text-align: right;
    width: 2em;
  }

  p.first-letter-example:first-letter
  {
    font-family: serif-swash;
    font-size: 46pt;
    font-style: italic;
    float: left;
    line-height: 46pt;
    padding-right: 6pt;
    margin-bottom: -12pt;
    vertical-align: 9pt;
  }
}
    </style>
  </head>
  <body>
    <div class="first top" />
    <div class="title first bottom" />
    <div class="title first top" />
    <div class="copy-right first bottom" />
    <div class="copy-right first top" />
    <div class="left bottom"><span /></div>
    <div class="right bottom"><span /></div>
    <div class="left top"><span /></div>
    <div class="right top"><span /></div>
    <div class="front left bottom"><span /></div>
    <div class="front right bottom"><span /></div>
    <div class="blank bottom" />
    <div class="blank top" />

    <div class="title-page">
      <div class="title-area">
        <div>The</div>
        <div class="title-main">CSSToXSLFO</div>
        <div>User Guide</div>
      </div>

      <div style="height: 10cm" />

      <div class="doc-info">
        <div>Version 1.6.2</div>
        <div>Werner Donn&#233;</div>
        <div>Pincette bvba</div>
        <div>23 August 2010</div>
      </div>
    </div>

    <div class="title-screen">The CSSToXSLFO User Guide</div>

    <div class="copy-right">
      <p>&#169; 2004-2010 Pincette bvba. All rights granted.</p>

      <p>This software is free and will remain free.</p>

      <p>To use at your own responsibility.</p>
    </div>

    <div class="front">
      <div class="toc" />
    </div>

    <div class="main">

    <h1>Introduction<span /></h1>

    <p>&csstoxslfo; is a tool which converts an &xml; document, combined with a
&css2; style sheet, into an &xslfo; file. It has some special provisions for
&xhtml;, which is also an &xml; vocabulary.
The tool implements a reasonable subset of &css2;. It also
adds a few extensions for handling page-related issues properly. Note that the
tool is not a general-purpose printing tool for any kind of &html; pages you
can find on the Internet.</p>

    <p>The goal of &csstoxslfo; is to provide a rather easy interface to fine
printing environments that use &xslfo; as their input. It is
a compromise between the simplicity of style sheet expression and the quality
of the result. &xslfo; is quite difficult. Writing style
sheets that produce it are mostly written in &xslt;, which is
not straightforward to everyone either. &css; on the other hand
is rather simple and yet it is powerful. In fact it combines element selection
and formatting specification in one easy-to-learn syntax. The cost is that a
lot of interesting &xslfo; features are not available.</p>

    <p>An area where the tool can be a plus is the programmatic generation of
reports within applications. The variety in style for reports is not that
great. The offered feature set of &csstoxslfo; can be sufficient. Having report
programmers learn &xslfo; and &xslt; is not always an option, while many know
&css; and &xhtml; well enough to be productive with it.</p>

    <p>Another use-case for &csstoxslfo; is writing documents in &xml;. One can
put work in a style sheet once and reuse that through the mark-up paradigm,
in which content and formatting are separated.
The formatting features should be sufficient to produce day-to-day documents in
a typical business environment. Such documents don't tend to be very
complicated, with respect to layout that is.</p>

    <div class="separator" />

    <h1>In Practice<span /></h1>

    <h2>Specifying Style Sheets</h2>

    <p>The most general way of specifying a style sheet for a document with
&csstoxslfo; is the proposal in section 2.2 of [<a href="#CSS2" shape="rect">&css2;</a>]. It
consists of a processing instruction, which precedes the document, looking like
this:</p>

    <pre xml:space="preserve">  &lt;?xml-stylesheet type="text/css" href="style.css"?></pre>

    <p>For &xhtml; there are a few additional options. You can
use the <code>link</code> element to link a style sheet (only persistent style
sheets) to the document or you can embed it with the <code>style</code> element.
The <code>style</code> attribute is also available as specified in
[<a href="#XHTML" shape="rect">&xhtml;</a>].</p>

    <h2>Running It</h2>

    <p>There are six packages you can run from the command-line: one that
produces plain &xslfo;, one that returns the output of &xep;,
a product from RenderX (<a href="http://www.renderx.com" shape="rect">http://&#8203;www.&#8203;renderx.&#8203;com</a>),
another that returns the output of XSLFormatter, a product from Antenna
House
(<a href="http://www.antennahouse.com" shape="rect">http://&#8203;www.antennahouse.com</a>),
yet another that returns the output of Xinc, a product from Lunasil
<acronym>LTD</acronym> (<a href="http://www.lunasil.com" shape="rect">http://&#8203;www.&#8203;lunasil.&#8203;com</a>)
and finally, two that run &fop;
(<a href="http://xml.apache.org/fop/" shape="rect">http://&#8203;xml.&#8203;apache.&#8203;org/&#8203;fop/</a>).
One is for version 0.20.5 and the other for version 1.0.
The 0.20.5 one comes with a filter that removes a few properties, which are not
supported by &fop;. This makes &fop; complain less.</p>

<p>You need <acronym>JDK1.3</acronym> or higher to run the packages. For 1.3
you should create a classpath with a namespace-aware &xml; parser and an &xslt;
processor. The command-lines look as follows for plain &csstoxslfo;:</p>

    <pre xml:space="preserve">  > java -jar css2xslfo.jar url_or_filename &lt;options></pre>

    <p>For <acronym>XEP3</acronym>:</p>

    <pre xml:space="preserve">  > java -Dcom.renderx.xep.ROOT=&lt;XEP location> -jar css2xep.jar
      url_or_filename &lt;options></pre>

    <p>For &xep4;:</p>

    <pre xml:space="preserve">  > java -Dcom.renderx.xep.CONFIG=&lt;XEP location>/xep.xml
      -jar &lt;XEP location>/lib/css2xep.jar url_or_filename
      &lt;options></pre>

    <p>For XSLFormatter:</p>

    <pre xml:space="preserve">  > set dynamic library path to &lt;XSLFormatter location>/lib
  > set environment variable AH_FONT_CONFIGFILE to
      &lt;XSLFormatter location>/etc/font-config.xml
  > java -jar &lt;XSLFormatter location>/lib/css2xsl.jar
      url_or_filename &lt;options></pre>

    <p>For Xinc:</p>

      <pre xml:space="preserve">  > java -jar css2xinc.jar url_or_filename &lt;options></pre>

    <p>For &fop; 0.20.5:</p>

    <pre xml:space="preserve">  > java -jar css2fop.jar url_or_filename &lt;options></pre>

    <p>For &fop; 0.95:</p>

    <pre xml:space="preserve">  > java -jar css2fopnew.jar url_or_filename &lt;options></pre>

    <p>Additional system properties and/or enviroment variables can be set.
Please consult the product-specific documentation for this.</p>

    <p>In order for css2xep.jar to work, you should place it in the &lt;XEP
location>/lib directory and create a link to or a copy of your &xep; &jar; file
with the name <q>xep.jar</q>. Since &xep4; the link or copy are no longer
needed, because the &xep; &jar; file has the expected name.
For css2xsl.jar to work, you should place it in &lt;XSLFormatter location>/lib.
The css2fop.jar file needs to be next to fop.jar, which should be next
to the packages is uses. Therefore you should copy fop.jar from the &fop; build
directory to its lib directory. The same procedure is required for
css2fopnew.jar. The css2xinc.jar should be in the &xinc; lib directory.</p>

    <p>&csstoxslfo; uses the &xslt;-processor that comes with
the <acronym>JDK1.4</acronym>, which is
Xalan from <a href="http://www.apache.org" shape="rect">Apache</a>. For better performance
you can prepend <a href="http://xml.apache.org/xalan-j/" shape="rect">Xalan 2.6.0+</a> or <a href="http://saxon.sourceforge.net/" shape="rect">Saxon 8.3+</a> to
your boot classpath as follows (assuming /usr/local as the installation
directory of Xalan):</p>

    <pre xml:space="preserve">  > java -Xbootclasspath/p:/usr/local/xalan-j_2_6_0/bin/xalan.jar
      -jar css2xslfo.jar url_or_filename &lt;options></pre>

    <p>You can also use <acronym>JDK1.5</acronym>, which comes with a faster
&xslt; processor.</p>

    <p>For &xep; there is a special note. You have to specify another &xslt;
processor, because &xep; uses Saxon 6.5.x, with which it doesn't work. You can
either prepend another &xslt; processor to the boot classpath or you can simply
copy saxon8.jar in the &xep; lib directory.</p>

    <h3>Common Options</h3>

    <p>The following options are common to all six variants. The document
to be processed can be specified with a &url; or filename. If it is omitted,
stdin will be read.</p>

    <dl>
      <dt>-baseurl &lt;URL></dt>
      <dd>Change the base &url; of the input document. By default it is the
&url; of the document itself.</dd>

      <dt>-c &lt;URL or filename></dt>
      <dd>Specify a catalog in the format defined by SGML Open Technical
Resolution <acronym>TR9401:1997</acronym>. Only the <q>PUBLIC</q> and
<q>SYSTEM</q> keywords are supported.</dd>

      <dt>-h</dt><dd>Display the command-line syntax.</dd>

      <dt>-p &lt;comma-separated list of &url;s or filenames></dt>
      <dd>A list of pre-processing &xslt; style sheets that are executed on the
input document, in the specified order, before anything else.</dd>

      <dt>-uacss &lt;URL or filename></dt>
      <dd>Use another User Agent style sheet than the one built-in.</dd>

      <dt>-v</dt><dd>Turn on &xml; validation of the input document.</dd>

      <dt>parameter=value</dt>
      <dd>Specify User Agent parameters. Equivalent &css; constructs precede
these.</dd>
    </dl>

    <h3>Options Specific To css2xslfo.jar</h3>

    <dl>
      <dt>-debug</dt>
      <dd>Produces a number of intermediary files representing the different
processing steps.</dd>

      <dt>-fo &lt;filename></dt>
      <dd>The &xslfo; output file. If it is omitted stdout will be written
instead.</dd>
    </dl>

    <h3>Options Specific To css2xep.jar</h3>

    <p>One the following options should be specified.</p>

    <dl>
      <dt>-pdf &lt;filename></dt>
      <dd>The &pdf; output file. Either this option or the <q>-ps</q> options
should be present.</dd>

      <dt>-ps &lt;filename></dt>
      <dd>The PostScript output file. Either this option or the <q>-pdf</q>
options should be present.</dd>

      <dt>-config &lt;URL or filename></dt>
      <dd>The &xep; configuration file.</dd>

      <dt>-q</dt>
      <dd>Makes &xep; silent.</dd>
    </dl>

    <h3>Options Specific To css2xsl.jar</h3>

    <dl>
      <dt>-pdf &lt;filename></dt>
      <dd>The &pdf; output file. This option is mandatory.</dd>

      <dt>-config &lt;URL or filename></dt>
      <dd>The XSLFormatter configuration file.</dd>
    </dl>

    <h3>Options Specific To css2fop.jar</h3>

    <dl>
      <dt>-fc &lt;filename></dt>
      <dd>A user configuration file.</dd>

      <dt>-pdf &lt;filename></dt>
      <dd>The &pdf; output file. Either this option or one of the <q>-ps</q>
and <q>-svg</q> options should be present.</dd>

      <dt>-ps &lt;filename></dt>
      <dd>The PostScript output file. Either this option or one of the
<q>-pdf</q> and <q>-svg</q> options should be present.</dd>

      <dt>-q</dt>
      <dd>Makes &fop; silent.</dd>

      <dt>-svg &lt;filename></dt>
      <dd>The <acronym>SVG</acronym> output file. Either this option or one of
the <q>-pdf</q> and <q>-ps</q> options should be present.</dd>
    </dl>

    <h3>Options Specific To css2fopnew.jar</h3>

    <dl>
      <dt>-fop &lt;options></dt>
      <dd>The rest of the command-line will be parsed by FOP. Specifying an
input file here doesn't work. The <q>-q</q> option will only work if you
configure the Apache logger environment. The &fop; command-line logger can be
set by assigning the value
<code>org.&#8203;apache.&#8203;fop.&#8203;util.&#8203;CommandLineLogger</code>
to the system property
<code>org.&#8203;apache.&#8203;commons.&#8203;logging.&#8203;Log</code>. This
option is mandatory.</dd>
    </dl>

    <h3>Options Specific To css2xinc.jar</h3>

    <p>One the following options should be specified.</p>

    <dl>
      <dt>-pdf &lt;filename></dt>
      <dd>The &pdf; output file. This option is mandatory.</dd>

      <dt>-config &lt;URL or filename></dt>
      <dd>The &xinc; configuration file.</dd>
    </dl>

    <h3 id="uapar">User Agent Parameters</h3>

    <p>The User Agent parameters are common to all three packages. They have
no effect if there are @page rules in the style sheet, except for the
<q>rule-thickness</q> parameter. Furthermore, equivalent &css; constructs, when
present in the style sheet, always precede.</p>

    <dl>
      <dt>column-count</dt>
      <dd>The number of columns on a page. The default is <q>1</q>.</dd>

      <dt>country</dt>
      <dd>The country code. The default is <q>GB</q>.</dd>

      <dt>font-size</dt>
      <dd>The point size of the font. The default for paper sizes <q>a5</q>
and <q>b5</q> is <q>10pt</q>. For all other paper sizes the default is
<q>11pt</q>. See also the <q>paper-size</q> parameter.</dd>

      <dt>html-header-mark</dt>
      <dd>An &html; element can be passed here. Its contents will be used as the
running header. By default there is no mark.</dd>

      <dt>language</dt>
      <dd>The language code. The default is <q>en</q>.</dd>

      <dt>odd-even-hift</dt>
      <dd>The amount by which the page contents is shifted in the inline
progression direction when the paper mode is <q>twosided</q>. The default is
<q>10mm</q>. See also the <q>paper-mode</q> parameter.</dd>

      <dt>orientation</dt>
      <dd>The allowed values are <q>portrait</q>, which is the default, and
<q>landscape</q>.</dd>

      <dt>paper-margin-bottom</dt>
      <dd>The bottom margin of a page. The default is <q>0mm</q>.</dd>

      <dt>paper-margin-left</dt>
      <dd>The left margin of a page. The default is <q>25mm</q>.</dd>

      <dt>paper-margin-right</dt>
      <dd>The right margin of a page. The default is <q>25mm</q>.</dd>

      <dt>paper-margin-top</dt>
      <dd>The top margin of a page. The default is <q>10mm</q>.</dd>

      <dt>paper-mode</dt>
      <dd>The allowed values are <q>onesided</q>, which is the default, and
<q>twosided</q>.</dd>

      <dt>paper-size</dt>
      <dd>The allowed values are <q>a4</q>, which is the default, <q>a0</q>,
<q>a1</q>, <q>a2</q>, <q>a3</q>, <q>a5</q>, <q>b5</q>, <q>executive</q>,
<q>letter</q> and <q>legal</q>.</dd>

      <dt>rule-thickness</dt>
      <dd>The default thickness for rules when there was no &css; specification
for it. The default is <q>0.2pt</q>.</dd>

      <dt>writing-mode</dt>
      <dd>The &xslfo; writing mode. The default is <q>lr-tb</q>. Other possible
values are <q>rl-tb</q>, <q>tb-rl</q>, <q>lr</q>, <q>rl</q> and <q>tb</q>. See
also [<a href="#XSLFO" shape="rect">&xslfo;</a>].</dd>
    </dl>

    <h2>Building CSSToXSLFO</h2>

    <p>The tool comes with an <a href="http://ant.apache.org/" shape="rect"><acronym>ANT</acronym></a> file.
The default target only builds the css2xslfo.jar file. Then there are also the
<code>xep</code>, <code>xsl</code>, <code>xinc</code>, <code>fop</code> and
<code>fopnew</code> targets, which produce css2xep.jar, css2xsl.jar,
css2xinc.jar, css2fop.jar and css2fopnew.jar respectively.</p>

    <h2>Ant Tasks</h2>

    <p>In each package there is a corresponding Ant task. The following table
gives the respective class names.</p>

    <table class="ant-tasks" rules="all">
      <col width="1*" span="1" />
      <col width="2*" span="1" />
      <thead>
        <tr>
          <th rowspan="1" colspan="1">Package</th>
          <th rowspan="1" colspan="1">Ant task class name</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">css2xslfo.jar</td>
          <td rowspan="1" colspan="1">be.re.css.ant.CSSToXSLFO</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">css2xep.jar</td>
          <td rowspan="1" colspan="1">be.re.css.ant.CSSToXEP</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">css2xsl.jar</td>
          <td rowspan="1" colspan="1">be.re.css.ant.CSSToXSLFormatter</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">css2fop.jar</td>
          <td rowspan="1" colspan="1">be.re.css.ant.CSSToFOP</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">css2fopnew.jar</td>
          <td rowspan="1" colspan="1">be.re.css.ant.CSSToFOPNew</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">css2xinc.jar</td>
          <td rowspan="1" colspan="1">be.re.css.ant.CSSToXinc</td>
        </tr>
      </tbody>
    </table>

    <h3>Common Options</h3>

    <p>All tasks support the nested elements <code>parameter</code> and
<code>preprocessor</code>. With the former the parameters described in
<q><a href="#uapar" shape="rect">User Agent Parameter</a></q> can be specified through its
<code>name</code> and <code>value</code> attributes. With the latter a sequence
of pre-processing &xslt; style sheets can be provided. Its
<code>stylesheet</code> attribute should be set to a filename or &url;.
The following attributes are common to all tasks.</p>

    <table class="task-attributes" rules="all">
      <col width="2*" span="1" />
      <col width="4*" span="1" />
      <col width="1*" span="1" />
      <thead>
        <tr>
          <th rowspan="1" colspan="1">Attribute</th>
          <th rowspan="1" colspan="1">Description</th>
          <th rowspan="1" colspan="1">Required</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">baseurl</td>
          <td rowspan="1" colspan="1">Change the base &url; of the input document. By default it is the
&url; of the document itself.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">catalog</td>
          <td rowspan="1" colspan="1">Specify a catalog in the format defined by SGML Open Technical
Resolution <acronym>TR9401:1997</acronym>. Only the <q>PUBLIC</q> and
<q>SYSTEM</q> keywords are supported.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">input</td>
          <td rowspan="1" colspan="1">The input document as a &url; or filename.</td>
          <td rowspan="1" colspan="1">Yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">output</td>
          <td rowspan="1" colspan="1">The output document as a filename. The format is derived from its
extension.</td>
          <td rowspan="1" colspan="1">Yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">useragentstylesheet</td>
          <td rowspan="1" colspan="1">Use another User Agent style sheet than the one built-in.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">validate</td>
          <td rowspan="1" colspan="1">Turn on &xml; validation of the input document. Defaults to
<code>false</code>.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
      </tbody>
    </table>

    <h3>Options Specific To css2xep.jar</h3>

    <table class="task-attributes" rules="all">
      <col width="1*" span="1" />
      <col width="3*" span="1" />
      <col width="1*" span="1" />
      <thead>
        <tr>
          <th rowspan="1" colspan="1">Attribute</th>
          <th rowspan="1" colspan="1">Description</th>
          <th rowspan="1" colspan="1">Required</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">config</td>
          <td rowspan="1" colspan="1">The &xep; configuration file. It may be a filename or a
&url;.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">quiet</td>
          <td rowspan="1" colspan="1">Makes &xep; silent.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
      </tbody>
    </table>

    <h3>Options Specific To css2fop.jar</h3>

    <table class="task-attributes" rules="all">
      <col width="1*" span="1" />
      <col width="3*" span="1" />
      <col width="1*" span="1" />
      <thead>
        <tr>
          <th rowspan="1" colspan="1">Attribute</th>
          <th rowspan="1" colspan="1">Description</th>
          <th rowspan="1" colspan="1">Required</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">config</td>
          <td rowspan="1" colspan="1">A user configuration file.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">quiet</td>
          <td rowspan="1" colspan="1">Makes &fop; silent.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
      </tbody>
    </table>

    <h3>Options Specific To css2fopnew.jar</h3>

    <table class="task-attributes" rules="all">
      <col width="1*" span="1" />
      <col width="3*" span="1" />
      <col width="1*" span="1" />
      <thead>
        <tr>
          <th rowspan="1" colspan="1">Attribute</th>
          <th rowspan="1" colspan="1">Description</th>
          <th rowspan="1" colspan="1">Required</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">config</td>
          <td rowspan="1" colspan="1">A user configuration file.</td>
          <td rowspan="1" colspan="1">No</td>
        </tr>
      </tbody>
    </table>

    <div class="separator" />

    <h1>Compliance With CSS2<span /></h1>

    <h2>Specifications</h2>

    <table class="specifications" rules="all">
      <col width="2*" span="1" />
      <col width="1*" span="1" />
      <col width="2*" align="justify" span="1" />
      <thead>
        <tr>
          <th rowspan="1" colspan="1">Section</th>
          <th rowspan="1" colspan="1">Implemented</th>
          <th rowspan="1" colspan="1">Remarks and restrictions</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">4.1 Syntax</td> 
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1">Thanks to Flute.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">4.2 Rules for handling parsing errors</td> 
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">Unknown properties will end up in the &xslfo; file and cause
errors in a &xslfo; processor.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">4.3 Values</td> 
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1">Thanks to Flute.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">4.4 &css; document representation</td> 
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1">Thanks to Flute.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">5 Selectors</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">All sections but 5.11.2 and 5.11.3. The
<code>:first-letter</code> pseudo element is implemented with the restriction
that letter combinations, which are considered as one letter, are not examined.
As a workaround you can use the ligature Unicode characters instead. The
<code>vertical-align</code> is also valid when <code>float</code> is
<code>none</code>. In that case it applies to the inline material which is
affected by the pseudo element.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">6 Assigning property values, Cascading and Inheritance</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">7 Media types</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1">By design, only types <code>all</code> and <code>print</code>
are supported.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">8 Box model</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.1.1 The viewport</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.1.2 Containing blocks</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.2.1 Block-level elements and block boxes</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">Compact and run-in boxes are not supported.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.2.2 Inline-level elements and inline boxes</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">Compact and run-in boxes and inline tables are not
supported.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.2.3 Compact boxes</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.2.4 Run-in boxes</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.2.5 The 'display' property</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">See property table.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.3 Positioning schemes</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.4 Normal flow</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.5 Floats</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.6 Absolute positioning</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.7 Relationships between 'display', 'position', and 'float'</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.9 Layered presentation</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">9.10 Text direction: the 'direction' and 'unicode-bibi'
properties</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">10 Visual formatting model details</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">See the property table for the height property.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">11 Visual effects</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">12.1 The :before and :after pseudo-elements</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">12.2 The 'content' property</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">12.3 Interaction of :before and :after with 'compact' and
'run-in' elements</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">12.4 Quotation marks</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">12.5 Automatic counters and numbering</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">12.6.1 Markers: the 'marker-offset' property</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">12.6.2 Lists: the 'list-style-type', 'list-style-image',
'list-style-position', and 'list-style' properties</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">13.2.1 Page margins</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">13.2.2 Page size: the 'size' property</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">13.2.3 Crop marks: the 'marks' property</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">13.2.4 Left, right, and first pages</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">13.2.5 Content outside the page box</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">13.3 Page breaks</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">Named pages are only supported for block-level and table
elements, which are not inside of a table and have an ancestor with the
<code>region</code> property set to <code>body</code>.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">13.4 Cascading in the page context</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">14 Colors and Backgrounds</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">15 Fonts</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">@font-face and descriptors are not supported.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">16 Text</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">17 Tables</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">Inline tables are not supported. Anonymous table objects are
only supported for missing table groups and missing table cells in a row, on
the condition that there are table column elements. Audio rendering is not
supported.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">18 User interface</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">19 Aural style sheets</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
      </tbody>
    </table>

    <h2>Properties</h2>

    <table class="specifications" rules="all">
      <col width="2*" span="1" />
      <col width="1*" span="1" />
      <col width="2*" align="justify" span="1" />
      <thead>
        <tr>
          <th rowspan="1" colspan="1">Property</th>
          <th rowspan="1" colspan="1">Implemented</th>
          <th rowspan="1" colspan="1">Remarks and restrictions</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">azimuth</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">background</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">background-attachment</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">background-color</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">background-image</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">background-position</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">background-repeat</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-bottom</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-bottom-color</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-bottom-style</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-bottom-width</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-collapse</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">Not for <code>inline-table</code>.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-color</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-left</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-left-color</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-left-style</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-left-width</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-right</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-right-color</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-right-style</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-right-width</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-spacing</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">Not for <code>inline-table</code>.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-style</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-top</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-top-color</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-top-style</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">border-top-width</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">borded-width</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">bottom</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">caption-side</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">clear</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">clip</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">color</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">content</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">counter-increment</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">counter-reset</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">cue</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">cue-after</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">cue-before</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">cursor</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">direction</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">display</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">The values <code>run-in</code>, <code>compact</code>
and <code>inline-table</code> are not supported. The <code>marker</code> value
is supported with the limiation that the value <code>auto</code> for the
<code>width</code> property is not. Markers also don't work with floats.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">elevation</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">empty-cells</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">float</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">fonts</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">font-family</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">font-size</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">font-size-adjust</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">font-stretch</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">font-style</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">font-variant</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">font-weight</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">height</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">A percentage value for the height of a block, which is in another
block with an explicit height, will be treated as <code>auto</code>. This stems
from the fact that in this case a block has to be split in a fo:block-container
and a nested fo:block, because there are properties that don't apply to both of
them. The inner original block will therefore have a parent without an
explicit height specification. The latter has moved to the surrounding
fo:block-container.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">left</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">letter-spacing</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">line-height</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">list-style</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">See individual properties.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">list-style-image</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">list-style-position</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">A list should be uniform. Specifying different values for
different list items will produce undesired results.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">list-style-type</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">
            <p>Only the values <code>disc</code>, <code>circle</code>,
<code>square</code>, <code>decimal</code>, <code>lower-roman</code>,
<code>upper-roman</code>, <code>lower-alpha</code>, <code>lower-latin</code>,
<code>upper-alpha</code>, <code>upper-latin</code> and <code>none</code> are
supported. The additional glyphs defined in [<a href="#CSS3L" shape="rect"><acronym>CSS3L</acronym></a>] are also supported. Those are
<code>box</code>, <code>check</code>, <code>diamond</code> and
<code>hyphen</code>.</p>
            <p>A list should be uniform. Specifying different values for
different list items will produce undesired results.</p>
          </td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">margin</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">margin-bottom</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">margin-left</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">margin-right</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">margin-top</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">marker-offset</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">marks</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">max-height</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">max-width</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">min-height</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">min-width</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">orphans</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">outline</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">outline-color</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">outline-style</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">outline-width</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">overflow</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">padding</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">padding-bottom</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">padding-left</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">padding-right</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">padding-top</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">page</td>
          <td rowspan="1" colspan="1">partial</td>
          <td rowspan="1" colspan="1">Only for block-level and table elements, which are not inside
of a table and have an ancestor with the <code>region</code> property set to
<code>body</code>.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">page-break-after</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">page-break-before</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">page-break-inside</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">pause</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">pause-after</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">pause-before</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">pitch</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">play-during</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">play-range</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">position</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">quotes</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">richness</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">right</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">size</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">speak</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">speak-header</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">speak-numeral</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">speak-punctuation</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">speech-rate</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">stress</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">table-layout</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">text-align</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">text-decoration</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">text-indent</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">text-transform</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">top</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">unicode-bibi</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">vertical-align</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">visibility</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">voice-family</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">volume</td>
          <td rowspan="1" colspan="1">no</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">white-space</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">widows</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">width</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">word-spacing</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
        <tr>
          <td rowspan="1" colspan="1">z-index</td>
          <td rowspan="1" colspan="1">yes</td>
          <td rowspan="1" colspan="1" />
        </tr>
      </tbody>
    </table>

    <div class="separator" />

    <h1>Extensions<span /></h1>

    <p>The extension features of the tool mostly pertain to page-oriented
aspects. Care has been taken to not introduce new syntax. There are, however, a
number of new properties. Those are normally safely ignored by browsers. In the
case where there would be an impact on the layout produced by browsers, the
properties can be confined to the <q>print</q> medium through @media rules.</p>

    <h2>Page Regions</h2>

    <p>This extension introduces &xslfo;-compatible page regions. Regions can
be defined by placing a <code>region</code> property on an element. The allowed
values are <code>bottom</code>, <code>left</code>, <code>right</code>,
<code>top</code> and <code>body</code>. At least one element with the
<code>region</code> property set to <code>body</code> should be present in the
document.<span class="footnote-reference" /><span class="footnote-body">The
&xhtml; User Agent style sheet sets this property to the <code>body</code>
element.</span> Page sequences are only generated for the content of such an
element. The regions other than the body region must be the first direct
children of the body region. Otherwise they are ignored. In the case of
&xhtml;, for example, this means that they should come at the
beginning of the <code>body</code> element.</p>

    <p>On top of that, either the <code>width</code> property, for left and
right regions, or the <code>height</code> property, for top and bottom regions,
should be defined. They will determine the dimensions of the page
regions. The default value for <code>width</code> is <q>20mm</q>. For
<code>height</code> it is <q>10mm</q>.</p>

    <p>The extension property <code>precedence</code> is also available for
the top and bottom regions. Its value can be <code>true</code> or
<code>false</code>, the latter being the initial value. The property says
whether the width of the top or bottom region is equal to that of the page
reference area or if they give way to the left and right regions.</p>

    <p>The regions work together with the @page rules, of which there should be
at least one. It is possible to specify different regions, which correspond to
the different page types in the style sheet. This can be achieved by also
specifying the <code>page</code> property, which is a standard &css2; property.
Consider the following example:</p>

    <pre xml:space="preserve">  div.bottom-left, div.bottom-right { display: none; }

  @media print
  {
    div.bottom-left
    {
      height: 15mm;
      page: left;
      region: bottom;
      text-align: left;
    }

    div.bottom-right
    {
      height: 15mm;
      page: right;
      region: bottom;
      text-align: right;
    }

    span.page:before { content: counter(page); }
  }</pre>

    <p>This says that on left pages the bottom region is left-aligned, while
on right pages it is right-aligned. The <code>span</code> element is used in
the following region definitions:</p>

    <pre xml:space="preserve">  &lt;div class="bottom-left">
    &lt;p>&amp;nbsp;&lt;/p>
    &lt;div>&lt;span class="page"/>&lt;/div>
  &lt;/div>

  &lt;div class="bottom-right">
    &lt;p>&amp;nbsp;&lt;/p>
    &lt;div>&lt;span class="page"/>&lt;/div>
  &lt;/div></pre>

    <p>The <code>page</code> property bears a kind of inheritance mechanism.
For any page the regions with the most specific <code>page</code> property will
be selected. A region without a <code>page</code> property is the least
specific. A named page is more specific and the values <code>left</code> and
<code>right</code> are yet more specific. After this comes the new pseudo page
<code>blank</code>, which is for blank pages that are generated because of page
positioning constraints such as left and right. The first page of a chapter,
for example, is sometimes forced to be a right page. This can produce an extra
blank page for the previous chapter. In fact, this maps directly to the &xslfo;
blank pages. There are special values, which are even more specific, such as
<code>first-right</code>, <code>blank-left</code>,
<code>left-&lt;page-name></code>, etc. If, for example, there is no bottom
region for <code>first-right</code>, but there is one for <code>first</code>,
the latter will be selected if the first page happens to on the right. See
section <a href="#page-prop" shape="rect"><q><i>page</i></q></a> for the
precise precedence rules.</p>

    <p>In order for the top, bottom, left and right region elements not to
interfere with the normal flow it is best to set their display type to
<code>none</code>.</p>

    <h2>Page Numbering</h2>

    <p>The two special counters <code>page</code> and <code>pages</code> in
this tool are taken over from the &css3; Paged Media Module (see also [<a href="#CSS3P" shape="rect"><acronym>CSS3P</acronym></a>]). The <code>page</code> can be
used just like any other counter, except that it is confined to the regions.
The following example shows a document with a preface and a body. Each reset
the page count. The preface has a lower Roman numbering style, while the body
uses the decimal style. If the body page didn't reset the counter,
numbering would continue from the preface, but with a change of style.</p>

    <pre xml:space="preserve">  &lt;?xml version="1.0" encoding="UTF-8"?>
  &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  &lt;html xmlns="http://www.w3.org/1999/xhtml">
    &lt;head>
      &lt;title>&lt;/title>
      &lt;style type="text/css">
  @page preface
  {
    counter-reset: page;
    margin: 10%;
  }

  @page body
  {
    counter-reset: page;
    margin: 10%;
  }
  
  div.bottom-preface
  {
    page: preface;
    region: bottom;
  }
  
  div.bottom-body
  {
    page: body;
    region: bottom;
  }
  
  div.bottom-preface > span.page:before
  {
    content: counter(page, lower-roman);
  }
  
  div.bottom-body > span.page:before
  {
    content: counter(page, decimal);
  }
  
  div.preface { page: preface; }
  div.body { page: body; }
      &lt;/style>
    &lt;/head>
    &lt;body>
      &lt;div class="bottom-preface">&lt;span class="page"/>&lt;/div>
      &lt;div class="bottom-body">&lt;span class="page"/>&lt;/div>
      &lt;div class="preface">
        &lt;p>Text.&lt;/p>
      &lt;/div>
      &lt;div class="body">
        &lt;p>Text.&lt;/p>
      &lt;/div>
    &lt;/body>
  &lt;/html></pre>

    <p>When switching between named pages you can control how the ending named
page sequence should be terminated with the extension property
<code>force-page-count</code>. For example, it some page sequence produces five
pages, you can force the sequence to produce six pages by setting the property
to <code>even</code>. An extra blank page will then be generated before starting
the new page sequence. If you don't want such behaviour, you should set the
property to <code>no-force</code>, since the initial value is
<code>auto</code>.</p>

    <h2>Page References</h2>

    <p>You sometimes want to write phrases like <q>The diagram on page 19
...</q>. The &csstoxslfo; tool provides this functionality through the
<code>page-ref</code> function, which can be used in the <code>content</code>
property. Its only parameter is the name of an attribute that contains the &id;
of another element. The function call will be replaced with the number of the
page that element is on.</p>

    <p>In &xhtml; it is a bit more complicated to achieve the desired result,
because there aren't many extension attributes available for it. The
following fragment shows how it can be done:</p>

    <pre xml:space="preserve">  &lt;img id="img1" src="file:///t.png"/>
  ...
  &lt;span class="page-ref">&lt;span class="img1"/>&lt;/span></pre>

    <p>The accompanying style sheet rule would then be:</p>

    <pre xml:space="preserve">  span.page-ref > span:before { content: page-ref(class); }</pre>

    <h2>Leaders</h2>

    <p>It is possible to use &xslfo; leaders through the display type
<code>leader</code>. The properties defined in section 7.21 of [<a href="#XSLFO" shape="rect">&xslfo;</a>] (<q>Leader and Rule Properties</q>) can be used in
a &css; style sheet, with the exception that the <code>leader-length</code>
property cannot have a length range as a value. If you want to create table of
contents lines or something similar, you also need the &xslfo; property
<code>text-align-last</code>, described in section 7.15.10 of
[<a href="#XSLFO" shape="rect">&xslfo;</a>]. The following example shows how a table of
contents line could be made in &xhtml;.</p>

    <pre xml:space="preserve">  &lt;div class="toc">
    &lt;a href="#chapter1">Title of Chapter 1&lt;/a>
    &lt;span class="leader"/>
    &lt;span class="page-ref">&lt;span class="chapter1"/>&lt;/span>
  &lt;/div></pre>

    <p>The piece of style sheet that goes with it is:</p>

    <pre xml:space="preserve">  div.toc
  {
    text-align-last: justify;
  }

  span.leader
  {
    display: leader;
    leader-pattern: dots;
    leader-pattern-width: 5pt;
  }

  span.page-ref > span:before
  {
    content: page-ref(class);
  }</pre>

    <h2>Named Strings</h2>

    <p>Named strings, as described in [<a href="#CSS3G" shape="rect"><acronym>CSS3G</acronym></a>], are supported in &csstoxslfo;.
This consists of the <code>string-set</code> property,
with which contents can be captured, and the <code>string()</code> function.
The latter can occur in the value of the <code>content</code> property. The
<code>string-set</code> property accepts values which are similar to those of
the <code>content</code> property. There is an additional keyword
<code>contents</code>, which is replaced with the string value of the element
carrying the <code>string-set</code> property.</p>

    <p>The following is a simple &xhtml; example of how you can create a running
header that refers to the current chapter.</p>

    <pre xml:space="preserve">  &lt;body>
    &lt;div class="top">
      &lt;span class="mark"/>
    &lt;/div>
    ...
    &lt;h1>Chapter Title&lt;/h1>
    ...
  &lt;/body></pre>

    <p>Here is the bit of style sheet that does it:</p>

    <pre xml:space="preserve">  div.top
  {
    region: top;
    display: none;
  }

  div.top > span.mark:before { content: string(mark); }

  h1 { string-set: mark contents; }</pre>

    <h2>Hyphenation</h2>

    <p>Text can be hyphenated through the <code>hyphenate</code> property,
which is inherited. The possible values are <code>true</code> and
<code>false</code>. Hyphenation is turned off by default.</p>

    <h2>Footnotes</h2>

    <p>It is possible to produce footnotes using the
<code>footnote-reference</code> and <code>footnote-body</code> display types.
The former is displayed in the flow, while
the latter goes to the footnote area at the bottom of the page. When a footnote
body occurs it must be either immediately preceded by a footnote reference or
have a <code>:before</code> pseudo element with the display type
<code>footnote-reference</code>. Otherwise
it is treated as if the display were <code>none</code>. Whitespace between a
footnote reference and body is gobbled. A footnote reference can also occur on
its own.</p>

    <p>The contents of both the footnote reference and body is free. Both
display types exist to give you complete control over the contents and style.
Usually some footnote counter is used, as shown in the example below. There is
an extra counter style <code>footnote</code>, which produces symbols, such as
an asterix, dagger, etc.</p>

    <pre xml:space="preserve">  h1 { counter-reset: footnote; }

  span.footnote-body
  {
    display: footnote-body;
    font-size: 0.83em;
  }

  span.footnote-body:before
  {
    content: counter(footnote);
    padding-right: 1em;
  }

  span.footnote-reference
  {
    display: footnote-reference;
  }

  span.footnote-reference:before
  {
    counter-increment: footnote;
    content: counter(footnote);
    font-size: 0.83em;
    vertical-align: super;
  }</pre>

    <p>In the document a footnote would then look like this:</p>

    <pre xml:space="preserve">  &lt;p>Paragraph text.&lt;span class="footnote-reference"/>&lt;span
  class="footnote-body">Footnote text.&lt;/span>&lt;/p></pre>

    <p>You might find it cumbersome to have to place a footnote reference in
front of every footnote body. It can be avoided, at the expense of formatting
control however. You can define a <code>:before</code> pseudo element for the
footnote body and give it the display type <code>footnote-reference</code>.
Whatever contents it generates will then be used for the reference in the flow,
as well as in the footnote body at the bottom of the page. As a consequence,
the style is constrained by the fact that it must be decent for both contexts.
The style sheet becomes a bit simpler:</p>

    <pre xml:space="preserve">  h1 { counter-reset: footnote; }

  span.footnote-body
  {
    display: footnote-body;
    font-size: 0.83em;
  }

  span.footnote-body:before
  {
    counter-increment: footnote;
    content: counter(footnote);
    display: footnote-reference;
    font-size: 0.83em;
    vertical-align: super;
  }</pre>

    <p>If you want full control over the formatting in both contexts and at the
same time want to omit the footnote reference elements in the document, the
solution is to pre-process the document. The transformation is rather
trivial.</p>

    <h2>Orientation</h2>

    <p>You can rotate text with the <code>orientation</code> property. This
works only for block, table and table cell elements. The possible values are 0,
90, 180, 270, -90, -180, -270. They represent the degrees in the
counter-clockwise direction. The initial value is 0.</p>

    <h2>List Style Types</h2>

    <p>The glyphs for the <code>list-style-type</code> property, as defined in
[<a href="#CSS3L" shape="rect"><acronym>CSS3L</acronym></a>], are implemented.</p>

    <h2>Multicolumn</h2>

    <p>With the properties <code>column-count</code>, which must be strictly
positive, and <code>column-gap</code>, which is a length, a multi-column layout
can be specified for a page. Both properties are allowed in an @page rule. As a
consequence, if you want to switch between column modes, you have to switch
pages as well.</p>

    <p>With the <code>column-span</code> property a blocks and tables, that
are not themselves inside of another table, can be made to span all the columns
of a multi-column page. The allowed values for the property are <code>all</code>
and <code>none</code>.</p>

    <h2>Change Bars</h2>

    <p>The change bar properties introduced in
[<a href="#XSLFO11" shape="rect"><acronym>XSL-FO11</acronym></a>] are available for
<code>:before</code> and <code>:after</code> pseudo elements. For the latter,
only the <code>change-bar-class</code> property is relevant.
The following is a simple example:</p>

    <pre xml:space="preserve">  p.changed:before
  {
    change-bar-class: changed;
    change-bar-style: solid; /* initial value is none */
    change-bar-width: 0.2pt;
  }

  p.changed:after { change-bar-class: changed; }</pre>

    <p>Note that this feature only works for &xep4; at the moment.</p>

    <h2>Links</h2>

    <p>The <code>link</code> property can have the name of an attribute as
its value. The value of that attribute will be used for the generated link, as
the target &url; or the internal target &id;, if it is an
<acronym>IDREF</acronym> attribute, which distinguishes it from a relative
&url;. Likewise, the value of the <code>anchor</code> property can be the name
of an attribute, the value of which will become the target &id;. This way an
internal link destination can be created. For example:</p>

    <pre xml:space="preserve">  a[href] { link: href; }
  a[name] { anchor: name; }</pre>

    <h2>Graphics</h2>

    <p>An external graphic can be included in a document through the display
type <code>graphic</code>, which is an inline level display type. The elements
marked with it are <q>replaced elements</q>. As a consequence, the properties
<code>height</code> and <code>width</code> apply. The &xslfo;
properties <code>content-height</code>, <code>content-width</code>,
<code>content-type</code>, <code>scaling</code> and <code>scaling-method</code>
are also supported. Their definition is in [<a href="#XSLFO" shape="rect">&xslfo;</a>]. The
property <code>src</code> is interpreted differently. Its value should be the
name of an attribute that has a &uri; for a value. For the &xhtml; element
<code>img</code>, for example, the User Agent style sheet contains the
following:</p>

    <pre xml:space="preserve">  img
  {
    content-height: scale-to-fit;
    content-width: scale-to-fit;
    display: graphic;
    scaling: uniform;
    src: src;
  }</pre>

    <h2>Column And Row Spanning</h2>

    <p>In &xhtml; one can specify column and row spanning with the
<code>colspan</code> and <code>rowspan</code> attributes on the <code>td</code>
and <code>th</code> elements. It is, however, also possible to apply &css; to
other &xml; vocabularies. Hence, there should be an equivalent feature in &css;
to express this. The extension properties <code>colspan</code> and
<code>rowspan</code> serve that purpose. They can be used for elements with the
display type <code>table-cell</code>.</p>

    <h2>Proportional Column Widths</h2>

    <p>Again in &xhtml; it is possible to say that a column should occupy a
relative portion of the total table width. It is done by setting the
<code>width</code> attribute to a number, followed by an asterix. If we have,
for example, three columns with the widths <q>1*</q>, <q>2*</q> and <q>3*</q>,
they occupy 1, 2 and 3 sixth of the table width respectively. This is not part
of the &html; specification, but it is a widely supported feature.</p>

    <p>In order to provide it for other &xml; vocabularies then &xhtml;, the
unit <code>pcw</code>, which stands for <q>proportional column width</q>, is
available for the <code>width</code> property of an element with the display
type <code>table-column</code>.</p>

    <h2>Repeating Table Headers And Footers</h2>

    <p>By default table headers and footers are repeated when a table spans
several pages. You can suppress this by setting the
<code>table-omit-header-at-break</code> and
<code>table-omit-footer-at-break</code> properties to <code>true</code>
respectively.</p>

    <h2>CSS3 Namespaces</h2>

    <p>Namespaces for selectors, as defined in [<a href="#CSS3S" shape="rect"><acronym>CSS3S</acronym></a>], are implemented. This means you
can use namespace prefixes in element selectors and attribute conditions. The
prefixes are separated from the local name with a pipe sign (<q>|</q>).</p>

    <p>The namespaces are declared with the <code>@namespace</code> rule, which
should always come right after the <code>@import</code> rules if there are any.
In the following example the &xhtml; namespace has been declared as the default
namespace. Next to that, the DeltaXML namespace is declared with the prefix
<q>dx</q>. You also see the use of the <q>attr</q> function with an attribute
that has a prefix.</p>

    <pre xml:space="preserve">  @namespace url(http://www.w3.org/1999/xhtml);
  @namespace dx
    url(http://www.deltaxml.com/ns/well-formed-delta-v1);

  *[dx|delta=add], dx|new
  {
    text-decoration: underline;
  }

  *[dx|delta=delete], dx|old
  {
    text-decoration: line-through;
  }

  p[dx|delta]:before
  {
    content: attr(dx|delta);
    display: marker;
    marker-offset: 0.5em;
    text-align: right;
  }</pre>

    <h2>Wrappers</h2>

    <p>When processing &xml; in general you might encounter elements which
represent pure structure, i.e. they are not directly related to layout. For such
elements there shouldn't be any formatting objects in the output. Normally you
would have to pre-process the document in order to get rid of them in the proper
way.</p>

    <p>The display type <code>wrapper</code> is introduced to cope with common
cases. When an element has this display type, it will not contribute any
formatting objects. However, its inherited properties will be passed on to its
child elements, according to the property inheritance rules.</p>

    <p>With respect to &xml; processing, a wrapper seems to be
<q>transparant</q>. Note however that, while a wrapper can occur anywhere, it
influences &css; selector matching. For instance, it will interfere with
<q>direct sibling</q> and <q>direct child</q> selectors.</p>

    <h2>Foreign Elements</h2>

    <p>With the display type <code>foreign</code> it is possible to transfer
part of a document unmodified to an <code>fo:instream-foreign-object</code>
element. This may be useful for elements that are in another namespace than
that of the document itself and which are supported by the &xslfo; processor.
Typical examples are &svg; and MathML.</p>

    <h2 id="property-specs">Property Specifications</h2>

    <h3 id="anchor-prop">anchor</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;identifier> | attr(X)</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">block-level and inline-level elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;identifier></dt>
      <dd>The qualified name of an attribute, the value of which is the target
&id;. This type of value is <i>deprecated</i>, because it doesn't support
namespace prefixes.</dd>

      <dt>attr(X)</dt>
      <dd>This returns the value of the attribute of the subject with the
qualified name X. The &css3; namespace prefixes are supported. The value is the
target &id;.</dd>
    </dl>

    <h3 id="change-bar-class-prop">change-bar-class</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;name></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none, value required</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">before and after pseudo elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;name></dt>
      <dd>An NCName, as defined in [<a href="#NAMES" shape="rect">&names;</a>], to allow
pairing of before and after elements, which don't have to belong to the same
element. This way a change bar context is created.</dd>
    </dl>

    <h3 id="change-bar-color-prop">change-bar-color</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;color></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">the value of the <code>color</code> property</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">before pseudo elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;color></dt>
      <dd>Specifies the color of the change bar.</dd>
    </dl>

    <h3 id="change-bar-offset-prop">change-bar-offset</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;length></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">6pt</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">before pseudo elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;length></dt>
      <dd>Gives the distance from the edge of the column area containing the
text that is marked as changed to the center of the generated change bar. A
positive distance is directed away from the column region and into the margin
regardless of the <code>change-bar-placement</code> property. Relative lengths
(i.e., percentage values and lengths with units of <q>em</q>) are not permitted
for the value of this property.</dd>
    </dl>

    <h3 id="change-bar-placement-prop">change-bar-placement</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">left | right | inside | outside | alternate</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">start</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">before pseudo elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>alternate</dt>
      <dd>When there are exactly two columns, the change bar will be offset
from the left edge of all column one areas and the right edge of all column two
areas; when there are any other number of columns, this value is equivalent to
<q>outside</q>.</dd>

      <dt>inside</dt>
      <dd>If the page binding edge is on the left-edge, the change bar
will be offset from the left edge of all column areas. If the binding is the
right-edge, the change bar will be offset from the right edge of all column
areas. If the page binding edge is on neither the left-edge nor right-edge, the
change bar will be offset from the left edge of all column areas.</dd>

      <dt>left</dt>
      <dd>The change bar will be offset from the left edge of all column
areas.</dd>

      <dt>outside</dt>
      <dd>If the page binding edge is on the left-edge, the change bar
will be offset from the right edge of all column areas. If the binding is the
right-edge, the change bar will be offset from the left edge of all column
areas. If the page binding edge is on neither the left-edge nor right-edge, the
change bar will be offset from the right edge of all column areas.</dd>

      <dt>right</dt>
      <dd>The change bar will be offset from the right edge of all column
areas.</dd>
    </dl>

    <h3 id="change-bar-style-prop">change-bar-style</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;border-style></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">before pseudo elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <h3 id="change-bar-width-prop">change-bar-width</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;border-width></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">medium</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">before pseudo elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;border-width></dt>
      <dd>Relative lengths (i.e., percentage values and lengths with units of
<q>em</q>) are not permitted for the value of this property.</dd>
    </dl>

    <h3 id="colspan-prop">colspan</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;integer></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">1</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">table cells</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;integer></dt>
      <dd>Expresses the number of columns the table cell will span. The value
must be larger than or equal to 1.</dd>
    </dl>

    <h3 id="column-count-prop">column-count</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;integer> | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">1</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">the page context</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;integer></dt>
      <dd>The value must be larger than or equal to 1.</dd>
    </dl>

    <h3 id="column-gap-prop">column-gap</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;length> | &lt;percentage> | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">12.0pt</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">the page context</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">refer to the width of the body region</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;length></dt>
      <dd>This is an unsigned length, If a negative value has been specified a
value of 0pt will be used.</dd>

      <dt>&lt;percentage></dt>
      <dd>The value is a percentage of the width of the body region.</dd>
    </dl>

    <h3 id="column-span-prop">column-span</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">none | all | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">block elements which are not in table elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>all</dt>
      <dd>This element spans all columns of a multi-column region.</dd>

      <dt>none</dt>
      <dd>This element does not span multiple columns of a multi-column
region.</dd>
    </dl>

    <h3 id="content-height-prop">content-height</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">auto | scale-to-fit | &lt;length> |
&lt;percentage> | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">auto</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">graphic elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">intrinsic height</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>auto</dt>
      <dd>The content-height should be the intrinsic content-height.</dd>

      <dt>scale-to-fit</dt>
      <dd>A size of the content-height equal to the height of the viewport.
This implies a certain scaling factor to be applied onto the content.</dd>

      <dt>&lt;length></dt>
      <dd>An absolute size for the content-height. This implies a certain
scaling factor to be applied onto the content.</dd>

      <dt>&lt;percentage></dt>
      <dd>A percentage representing a scaling factor applied to the intrinsic
height.</dd>
    </dl>

    <h3 id="content-type-prop">content-type</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">auto | &lt;string></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">auto</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">graphic elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">intrinsic height</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>auto</dt>
      <dd>No identification of the content-type. The User Agent may determine
it by <q>sniffing</q> or by other means.</dd>

      <dt>&lt;string></dt>
      <dd>A specification of the content-type in terms of a mime-type, which
has the form <q>content-type:</q> followed by a mime content-type, e.g.,
content-type="content-type:image/svg+xml".</dd>
    </dl>

    <h3 id="content-width-prop">content-width</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">auto | scale-to-fit | &lt;length> |
&lt;percentage> | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">auto</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">graphic elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">intrinsic width</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>auto</dt>
      <dd>The content-width should be the intrinsic content-width.</dd>

      <dt>scale-to-fit</dt>
      <dd>A size of the content-width equal to the width of the viewport.
This implies a certain scaling factor to be applied onto the content.</dd>

      <dt>&lt;length></dt>
      <dd>An absolute size for the content-width. This implies a certain
scaling factor to be applied onto the content.</dd>

      <dt>&lt;percentage></dt>
      <dd>A percentage representing a scaling factor applied to the intrinsic
width.</dd>
    </dl>

    <h3 id="display-prop">display</h3>

    <p>This section specifies additional values for the property.</p>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">footnote-body | footnote-reference | foreign | graphic | leader | wrapper</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">inline</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">all elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>footnote-body</dt>
      <dd>The contents of the element goes to the footnote area. The element
must be either immediately preceded by an element of type
<code>footnote-reference</code> or have a <code>:before</code> pseudo element
of that type. Otherwise it is treated as if its display type
were <code>none</code>. Whitespace between a footnote reference and body is
removed. In case a pseudo element is used, the contents it generates is
displayed in the flow, as well as in the footnote body.</dd>

      <dt>footnote-reference</dt>
      <dd>This is an inline variant. Its contents is displayed in the flow. It
can occur without a following <code>footnote-body</code> element.</dd>

      <dt>foreign</dt>
      <dd>If an element has this display type, it is placed unmodified in an
<code>fo:instream-foreign-object</code> element.</dd>

      <dt>graphic</dt>
      <dd>This display type is used to include external graphics. It is an
inline level display type. Elements marked with it are replaced elements.</dd>

      <dt>leader</dt>
      <dd>This display type is used to produce &xslfo; leaders. It is an inline
level display type.</dd>

      <dt>wrapper</dt>
      <dd>An element with this display type doesn't contribute any formatting
objects. Its inherited properties are nevertheless inherited by its
subtree.</dd>
    </dl>

    <h3 id="force-page-count-prop">force-page-count</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">auto | even | odd | end-on-even |
end-on-odd | no-force | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">auto</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">the page context</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <p>The property is used to impose a constraint on the number of pages
in a page sequence. In the event that this constraint is not satisfied, an
additional page will be added to the end of the sequence. This page becomes the
<q>last</q> page of that sequence.</p>

    <dl>
      <dt>auto</dt>
      <dd>Force the last page in this page sequence to be an odd page if the
initial page number of the next page sequence is even. Force it to be an even
page if the initial page number of the next page sequence is odd. If there is
no next page sequence or if the value of its initial page number is <q>auto</q>
do not force any page.</dd>

      <dt>even</dt>
      <dd>Force an even number of pages in this page sequence.</dd>

      <dt>odd</dt>
      <dd>Force an odd number of pages in this page sequence.</dd>

      <dt>end-on-even</dt>
      <dd>Force the last page in this page sequence to be an even page.</dd>

      <dt>end-on-odd</dt>
      <dd>Force the last page in this page sequence to be an odd page.</dd>

      <dt>no-force</dt>
      <dd>Do not force either an even or an odd number of pages in this
page sequence.</dd>
    </dl>

    <h3 id="hyphenate-prop">hyphenate</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">false | true | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">false</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">block-level and inline-level elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>false</dt>
      <dd>Hyphenation is not active for the text in this element.</dd>

      <dt>true</dt>
      <dd>Hyphenation is active for the text in this element.</dd>
    </dl>

    <h3 id="initial-page-number-prop">initial-page-number</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">auto | auto-odd | auto-even | &lt;integer>
| inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">auto</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">the page context</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>auto</dt>
      <dd>The initial number shall be set to 1 if no previous page-sequence
exists in the document. If a preceding page-sequence exists, the initial number
will be one greater than the last number for that sequence.</dd>

      <dt>auto-odd</dt>
      <dd>A value is determined in the same manner as for <q>auto</q>. If that
value is an even number 1 is added.</dd>

      <dt>auto-even</dt>
      <dd>A value is determined in the same manner as for <q>auto</q>. If that
value is an odd number 1 is added.</dd>

      <dt>&lt;integer></dt>
      <dd>A positive integer. If a negative or non-integer value is provided,
the value will be rounded to the nearest integer value greater than or equal to
1.</dd>
    </dl>

    <h3 id="leader-alignment-prop">leader-alignment</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">none | reference-area | page | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">leader elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <p>Specifies whether leader elements having identical content and property
values shall have their patterns aligned with each other, with respect to their
common reference-area or page. For leader elements where the
<code>leader-pattern</code> property is specified as <code>dots</code> or as
<code>use-content</code>, this property will be honored. If the leader elements
is aligned, the left-edge of each cycle of the repeated pattern will be placed
on the left-edge of the next cycle in the appropriate pattern-alignment
grid.</p>

    <dl>
      <dt>none</dt>
      <dd>Leader-pattern has no special alignment.</dd>

      <dt>page</dt>
      <dd>Leader-pattern is aligned as if it began on the current page's
left-edge.</dd>

      <dt>reference-area</dt>
      <dd>Leader-pattern is aligned as if it began on the current
reference-area's content-rectangle left-edge.</dd>
    </dl>

    <h3 id="leader-length-prop">leader-length</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;length> | &lt;percentage> | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">12.0pt</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">leader elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">refer to the width of the content-rectangle of the parent
area.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;length></dt>
      <dd>Sets the length of a leader element.</dd>

      <dt>&lt;percentage></dt>
      <dd>Sets the length of a leader element to a percentage of the
width of the content-rectangle of the parent area.</dd>
    </dl>

    <h3 id="leader-pattern-prop">leader-pattern</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">space | rule | dots | use-content |
inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">space</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">leader elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>dots</dt>
      <dd>Leader is to be filled with a repeating sequence of dots. The choice
of dot character is dependent on the user agent.</dd>

      <dt>rule</dt>
      <dd>Leader is to be filled with a rule. If this choice is selected, the
<code>rule-thickness</code> and <code>rule-style</code> properties are used to
set the leader's style.</dd>

      <dt>space</dt>
      <dd>Leader is to be filled with blank space.</dd>

      <dt>use-content</dt>
      <dd>Leader is to be filled with a repeating pattern as specified by the
children of the leader element.</dd>
    </dl>

    <h3 id="leader-pattern-width-prop">leader-pattern-width</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">use-font-metrics | &lt;length> |
&lt;percentage> | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">use-font-metrics</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">leader elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">refer to the width of the content-rectangle of the parent
area.</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>use-font-metrics</dt>
      <dd>Use the width of the leader-pattern as determined from its font
metrics.</dd>

      <dt>&lt;length></dt>
      <dd>Sets the length for leader-pattern-repeating. The leader will have an
inline-space inserted after each pattern cycle to account for any difference
between the width of the pattern as determined by the font metrics and the
width specified in this property. If the length specified is less than the
value that would be determined via the <code>use-font-metrics</code> choice,
the value of this property is computed as if <code>use-font-metrics</code>
choice had been specified.</dd>

      <dt>&lt;percentage></dt>
      <dd>Sets the length for leader-pattern-repeating to a percentage of the
width of the content-rectangle of the parent area.</dd>
    </dl>

    <p>For leader elements where the
<code>leader-pattern</code> property is specified as <code>dots</code> or as
<code>use-content</code>, this property will be honored.</p>

    <h3 id="link-prop">link</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;identifier> | attr(X)</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">block-level and inline-level elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;identifier></dt>
      <dd>The qualified name of an attribute, the value of which is either a
target &id; or a &uri;. It is considered as an &id; if the attribute is of type
<acronym>IDREF</acronym>. This way a distinction is made with a relative &url;.
Note that the attribute type information should be available. This requires a
document type definition. This type of value is <i>deprecated</i>, because it
doesn't support namespace prefixes.</dd>

      <dt>attr(X)</dt>
      <dd>This returns the value of the attribute of the subject with the
qualified name X. The &css3; namespace prefixes are supported. The value is
considered as an &id; if the attribute is of type <acronym>IDREF</acronym>.
This way a distinction is made with a relative &url;. Note that the attribute
type information should be available. This requires a document type
definition.</dd>
    </dl>

    <h3 id="list-style-type-prop">list-style-type</h3>

    <p>This section specifies additional glyph values for the property.</p>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">box | check | diamond | hyphen</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">disc</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">elements with <q>display: list-item</q></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>box</dt>
      <dd>A hollow square.</dd>

      <dt>check</dt>
      <dd>A check mark.</dd>

      <dt>diamond</dt>
      <dd>A filled diamond.</dd>

      <dt>hyphen</dt>
      <dd>A hyphen bullet.</dd>
    </dl>

    <h3 id="orientation-prop">orientation</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">0 | 90 | 180 | 270 | -90 | -180 | -270 |
inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">0</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">block, table and table cell elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>0</dt>
      <dd>The material in this element is not rotated.</dd>

      <dt>90</dt>
      <dd>The material in this element is rotated 90 degrees counter-clockwise
with respect to the containing block element.</dd>

      <dt>180</dt>
      <dd>The material in this element is rotated 180 degrees counter-clockwise
with respect to the containing block element.</dd>

      <dt>270</dt>
      <dd>The material in this element is rotated 270 degrees counter-clockwise
with respect to the containing block element.</dd>

      <dt>-90</dt>
      <dd>The material in this element is rotated 90 degrees clockwise
with respect to the containing block element.</dd>

      <dt>-180</dt>
      <dd>The material in this element is rotated 180 degrees clockwise
with respect to the containing block element.</dd>

      <dt>-270</dt>
      <dd>The material in this element is rotated 270 degrees clockwise
with respect to the containing block element.</dd>
    </dl>

    <h3 id="page-prop">page</h3>

    <p>This section specifies the property in the context of static regions. It
defines the pages to which the static region applies. If more than one static
region of the same kind (left, right, top or bottom) applies to a page, the
most specific is selected, i.e. the one for which the most conditions are
fulfilled. Each property value expresses a number of conditions.</p>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">auto | first | last | left | right |
blank | first-left | first-right | last-left | last-right |
blank-left | blank-right | first-&lt;identifier> | last-&lt;identifier> |
left-&lt;identifier> | right-&lt;identifier> | blank-&lt;identifier> |
first-left-&lt;identifier> | first-right-&lt;identifier> |
last-left-&lt;identifier> | last-right-&lt;identifier> |
blank-left-&lt;identifier> | blank-right-&lt;identifier> |
&lt;identifier></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">auto</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">static regions</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>auto</dt>
      <dd>Applies to any page.</dd>

      <dt>blank</dt>
      <dd>Applies if the page is a blank page. Blank pages can be generated,
for example, when page breaks are forced to left or right pages.</dd>

      <dt>blank-left</dt>
      <dd>Applies if the page is a blank and a left page.</dd>

      <dt>blank-right</dt>
      <dd>Applies if the page is a blank and a right page.</dd>

      <dt>blank-&lt;identifier></dt>
      <dd>Applies if the page is a blank and a named page, with the name
set to the specified identifier.</dd>

      <dt>blank-left-&lt;identifier></dt>
      <dd>Applies if the page is a blank, left and named page, with the name
set to the specified identifier.</dd>

      <dt>blank-right-&lt;identifier></dt>
      <dd>Applies if the page is a blank, right and named page, with the name
set to the specified identifier.</dd>

      <dt>first</dt>
      <dd>Applies if the page is a first page.</dd>

      <dt>first-left</dt>
      <dd>Applies if the page is a first and a left page.</dd>

      <dt>first-right</dt>
      <dd>Applies if the page is a first and a right page.</dd>

      <dt>first-&lt;identifier></dt>
      <dd>Applies if the page is a first and a named page, with the name
set to the specified identifier. When the document switches to a named page
sequence, using the <code>page</code> property in the regular way, the first
page of that sequence is a first page.</dd>

      <dt>first-left-&lt;identifier></dt>
      <dd>Applies if the page is a first, left and named page, with the name
set to the specified identifier.</dd>

      <dt>first-right-&lt;identifier></dt>
      <dd>Applies if the page is a first, right and named page, with the name
set to the specified identifier.</dd>

      <dt>last</dt>
      <dd>Applies if the page is a last page.</dd>

      <dt>last-left</dt>
      <dd>Applies if the page is a last and a left page.</dd>

      <dt>last-right</dt>
      <dd>Applies if the page is a last and a right page.</dd>

      <dt>last-&lt;identifier></dt>
      <dd>Applies if the page is a last and a named page, with the name
set to the specified identifier. When the document switches to a named page
sequence, using the <code>page</code> property in the regular way, the last
page of that sequence is a last page.</dd>

      <dt>last-left-&lt;identifier></dt>
      <dd>Applies if the page is a last, left and named page, with the name
set to the specified identifier.</dd>

      <dt>last-right-&lt;identifier></dt>
      <dd>Applies if the page is a last, right and named page, with the name
set to the specified identifier.</dd>

      <dt>left</dt>
      <dd>Applies if the page is a left page.</dd>

      <dt>left-&lt;identifier></dt>
      <dd>Applies if the page is a left and a named page, with the name
set to the specified identifier.</dd>

      <dt>right</dt>
      <dd>Applies if the page is a right page.</dd>

      <dt>right-&lt;identifier></dt>
      <dd>Applies if the page is a right and a named page, with the name
set to the specified identifier.</dd>

      <dt>&lt;identifier></dt>
      <dd>Applies if the page is a named page, with the name
set to the specified identifier.</dd>
    </dl>

    <h3 id="precedence-prop">precedence</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">false | true | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">false</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">static top and bottom regions</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>false</dt>
      <dd>The width of the region is reduced by the incursions of the left and
right regions.</dd>

      <dt>true</dt>
      <dd>The height of the left and right regions is reduced by the incursions
of this region.</dd>
    </dl>

    <h3 id="region-prop">region</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">body | left | right | top | bottom | none</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">all elements, but see prose</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>body</dt>
      <dd>There should be one element with this value for the property. For the
contents of this element the page sequences will be generated.</dd>

      <dt>bottom</dt>
      <dd>This element becomes the bottom static region. The pages for which
this is the case can be limited through the
<a href="#page-prop" shape="rect"><code>page</code></a> property.</dd>

      <dt>left</dt>
      <dd>This element becomes the left static region.</dd>

      <dt>none</dt>
      <dd>The element is not a region.</dd>

      <dt>right</dt>
      <dd>This element becomes the right static region.</dd>

      <dt>top</dt>
      <dd>This element becomes the top static region.</dd>
    </dl>

    <p>The static region elements should be the first child elements of the
body region. In other words, they should precede all elements which are not
static regions, otherwise their <code>region</code> property is ignored. The
property is also ignored if there are no @page rules. In that case the default
page set-up is generated.</p>

    <h3 id="rowspan-prop">rowspan</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;integer></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">1</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">table cells</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;integer></dt>
      <dd>Expresses the number of rows the table cell will span. The value
must be larger than or equal to 1.</dd>
    </dl>

    <h3 id="rule-style-prop">rule-style</h3>

    <p>This property applies only if the <code>leader-pattern</code> property is
specified as <code>rule</code>.</p>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">none | dotted | dashed | solid | double |
groove | ridge | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">solid</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">leader elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>dashed</dt>
      <dd>The rule is a series of short line segments.</dd>

      <dt>dotted</dt>
      <dd>The rule is a series of dots.</dd>

      <dt>double</dt>
      <dd>The rule is two solid lines. The sum of the two lines and the space
between them equals the value of the <code>rule-thickness</code> property.</dd>

      <dt>groove</dt>
      <dd>The rule looks as though it were carved into the canvas. (Top/left
half of the rule's thickness is the color specified; the other half is
white.)</dd>

      <dt>none</dt>
      <dd>No rule, forces <code>rule-thickness</code> to 0.</dd>

      <dt>ridge</dt>
      <dd>The opposite of <q>groove</q>, the rule looks as though it were
coming out of the canvas. (Bottom/right half of the rule's thickness is the
color specified; the other half is white.)</dd>

      <dt>solid</dt>
      <dd>The rule is a single line segment.</dd>
    </dl>

    <h3 id="rule-thickness-prop">rule-thickness</h3>

    <p>This property applies only if the <code>leader-pattern</code> property is
specified as <code>rule</code>.</p>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;length></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">1.0pt</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">leader elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">yes</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;length></dt>
      <dd>The rule-thickness is always perpendicular to its length-axis. The
rule is thickened equally above and below the line's alignment position.</dd>
    </dl>

    <h3 id="scaling-prop">scaling</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">uniform | non-uniform | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">uniform</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">graphic elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">intrinsic width</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>non-uniform</dt>
      <dd>Scaling need not preserve the intrinsic aspect ratio.</dd>

      <dt>uniform</dt>
      <dd>Scaling should preserve the intrinsic aspect ratio.</dd>
    </dl>

    <h3 id="scaling-method-prop">scaling-method</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">auto | integer-pixels |
resample-any-method | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">auto</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">graphic elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">intrinsic width</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>auto</dt>
      <dd>The User Agent is free to choose either resampling, integer scaling,
or any other scaling method.</dd>

      <dt>integer-pixels</dt>
      <dd>The User Agent should scale the image such that each pixel in the
original image is scaled to the nearest integer number of device-pixels that
yields an image less-then-or-equal-to the image size derived from the
content-height, content-width, and scaling properties.</dd>

      <dt>resample-any-method</dt>
      <dd>The User Agent should resample the supplied image to provide an image
that fills the size derived from the <code>content-height</code>,
<code>content-width</code>, and <code>scaling</code> properties. The user agent
may use any sampling method.</dd>
    </dl>

    <h3 id="src-prop">src</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">&lt;identifier> | attr(X)</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none, value required</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">graphic elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>&lt;identifier></dt>
      <dd>The qualified name of an attribute, the value of which is a
&uri;. This type of value is <i>deprecated</i>, because it doesn't support
namespace prefixes.</dd>

      <dt>attr(X)</dt>
      <dd>This returns the value of the attribute of the subject with the
qualified name X. The &css3; namespace prefixes are supported. The value is a
&uri;.</dd>
    </dl>

    <h3 id="string-set-prop">string-set</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">none | &lt;identifier> contents |
&lt;identifier> &lt;content></td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">none</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">all elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>none</dt>
      <dd>No named string is set.</dd>

      <dt>&lt;identifier> contents</dt>
      <dd>The string named by the identifier is set to the textual contents of
the element.</dd>

      <dt>&lt;identifier> &lt;content></dt>
      <dd>The string named by the identifier is set to the result of the
evaluation of the expression in &lt;content>. The syntax for the expression is
the same as that for the <code>content</code> property.</dd>
    </dl>

    <h3 id="text-align-last-prop">text-align-last</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">center | inside | justify | left |
outside | relative | right | inherit</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">relative</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">block elements</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>center</dt>
      <dd>Specifies that the contents is to be centered horizontally.</dd>

      <dt>inside</dt>
      <dd>If the page binding edge is on the left-edge, the alignment will be
left. If the binding is on the right-edge, the alignment will be right. If
neither, use left alignment.</dd>

      <dt>justify</dt>
      <dd>Specifies that the contents is to be expanded to fill the available
width.</dd>

      <dt>left</dt>
      <dd>Specifies that the contents is to be aligned on the left-edge.</dd>

      <dt>outside</dt>
      <dd>If the page binding edge is on the left-edge, the alignment will be
right. If the binding is on the right-edge, the alignment will be left. If
neither, use right alignment.</dd>

      <dt>relative</dt>
      <dd>If <code>text-align</code> is <code>justify</code>, then the
alignment of the last line, and of any line ending in <span style="font-family: serif-title">U+000A</span>, will be left. If <code>text-align</code> is not
<code>justify</code>, <code>text-align-last</code> will use the value of
<code>text-align</code>.</dd>

      <dt>right</dt>
      <dd>Specifies that the contents is to be aligned on the right-edge.</dd>
    </dl>

    <h3 id="table-omit-footer-at-break-prop">table-omit-footer-at-break</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">false | true</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">false</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">tables</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>false</dt>
      <dd>This property specifies that the footer should not be ommitted.</dd>

      <dt>true</dt>
      <dd>This property specifies that the footer should be ommitted.</dd>
    </dl>

    <h3 id="table-omit-header-at-break-prop">table-omit-header-at-break</h3>

    <table class="property">
      <col width="1*" span="1" />
      <col width="5*" span="1" />
      <tbody>
        <tr>
          <td rowspan="1" colspan="1">Value:</td>
          <td rowspan="1" colspan="1">false | true</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Initial:</td>
          <td rowspan="1" colspan="1">false</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Applies to:</td>
          <td rowspan="1" colspan="1">tables</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Inherited:</td>
          <td rowspan="1" colspan="1">no</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Percentages:</td>
          <td rowspan="1" colspan="1">N/A</td>
        </tr>
        <tr>
          <td rowspan="1" colspan="1">Media:</td>
          <td rowspan="1" colspan="1">print</td>
        </tr>
      </tbody>
    </table>

    <dl>
      <dt>false</dt>
      <dd>This property specifies that the header should not be ommitted.</dd>

      <dt>true</dt>
      <dd>This property specifies that the header should be ommitted.</dd>
    </dl>

    <h2 id="misc-specs">Miscellaneous Specifications</h2>

    <h3 id="blank-pseudo-class">The :blank Pseudo-class</h3>

    <p>The :blank pseudo-class is available to specify properties in the page
context for blank pages. Those can be generated, for example, when pages are
forced to start at the left or right.</p>

    <h3 id="last-pseudo-class">The :last Pseudo-class</h3>

    <p>The :last pseudo-class is available to specify properties in the page
context for last pages. This is analogous to the :first pseudo-class.</p>

    <h3 id="page-properties">The background, border and padding page properties</h3>

    <p>The background, border and padding properties, as defined in [<a href="#CSS3P" shape="rect"><acronym>CSS3P</acronym></a>], are implemented. They
are, however, not entirely compatible with that specification. The
implementation applies the properties to the <code>region-body</code>, because
in &xslfo; they are not defined at the page master level.</p>

    <h3 id="page-counters">The page And pages Counters</h3>

    <p>The page counter represents the current page number, while the pages
counter represents the total number of pages in the document. Both can be used
in static regions only. The page counter may be reset in the page context.</p>

    <h3 id="page-ref-function">The page-ref Function</h3>

    <p>The page-ref function can be used in the <code>content</code>
property. Its only parameter is either the qualified name of an attribute that
contains the &id; of another element, or the attr(X) function, where X is the
qualified name of such an attribute. The former is deprecated, because it
doesn't support &css3; namespace prefixes, while the latter does. The function
call will be replaced with the number of the page the target element is on.</p>

    <h3 id="string-function">The string Function</h3>

    <p>The string function produces the string that was saved with a
<code>string-set</code> property. Its argument is the name used in a
<code>string-set</code> property. If a named string is set more than once on a
page, the first occurrence will be returned by the string function.</p>

    <h3 id="footnote-counter">The footnote Counter Style</h3>

    <p>This counter style produces symbols in the following order: *, &#8224;,
&#8225;, &#167;, ||, &#182;, #, **, &#8224;&#8224;,
&#8225;&#8225;, &#167;&#167;. If the counter value if larger than the
number of symbols in the preceding list, the * symbol is generated.</p>

    <h3 id="pcw-unit">The pcw Unit</h3>

    <p>This unit is available for the <code>width</code> property of an element
with display type <code>table-column</code>. It expresses the proportional width
for a table column. The value should be divided by the sum of all the present
proportional widths, which itself is equal to the width of the table minus all
fixed column widths.</p>

    <h3 id="namespaces">The @namespace Rule</h3>

    <p>With the @namespace rule a namespace can be declared, with or without a
prefix. In the latter case it is the default namespace. The scope of a declared
namespace is limited to the style sheet entity in which it is declared. The
@namespace rule should come right after the @import rules if there are any and
before all other rules. An @namespace rule has an optional prefix argument,
which is an identifier, followed by a mandatory &uri; specification. Consult
[<a href="#CSS3S" shape="rect"><acronym>CSS3S</acronym></a>] to learn how namespaces work
with selectors.</p>

    <div class="separator" />

    <h1>Embedding In An Application<span /></h1>

    <h2>API Specification</h2>

    <h3 id="CSSToXSLFOFilter">be.re.css.CSSToXSLFOFilter</h3>

    <p>This class extends 
<a href="http://www.saxproject.org/apidoc/org/xml/sax/helpers/XMLFilterImpl.html" shape="rect">org.&#8203;xml.&#8203;sax.&#8203;helpers.&#8203;XMLFilterImpl</a>.
The source of the &sax; events that are sent through the filter must be
namespace aware. If it is an &xml; parser this option must be turned on.</p>

    <h4>Constructors</h4>

    <div class="method">
      <div>public CSSToXSLFOFilter</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html" shape="rect">java.util.Map</a>
userAgentParameters,</div>
      <div class="p"><a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLReader.html" shape="rect">XMLReader
parent,</a></div>
      <div class="p">boolean debug</div>
      <div>) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <dl>
      <dt id="baseUrl">baseUrl</dt>
      <dd>
        <p>The <code>baseUrl</code> is used to resolve relative &url;s. This
includes references to style sheets as well as other resources. Because of the
latter the resulting &xslfo; document is not relocatable. The relative &url;s
in the input document are transformed into absolute ones using the
<code>baseUrl</code>. This copes with the case where the input document is an
anonymous stream that refers to style sheets in a relative way. The set of
style sheets is then relocatable through the <code>baseUrl</code>.</p>

        <p>If <code>baseUrl</code> is <code>null</code> no resolution of
relative &url;s will be done.</p>
    </dd>

      <dt id="userAgentStyleSheet">userAgentStyleSheet</dt>
      <dd>The default style sheet for the filter. It is used in the way
described in section 6.4 of <a href="#CSS2" shape="rect">[&css2;]</a>. If the parameter is
<code>null</code>, a default style sheet for &xhtml; is used.</dd>

      <dt id="userAgentParameters">userAgentParameters</dt>
      <dd>These are defined in section <a href="#uapar" shape="rect"><q><i>User Agent
Parameters</i></q></a>.</dd>

      <dt>parent</dt>
      <dd>The parent filter. It must not be <code>null</code>.</dd>

      <dt id="debug">debug</dt>
      <dd>If <code>debug</code> is <code>true</code> a number of debug
files are dumped. They show the results of the internal processing steps.</dd>
    </dl>

    <div class="method">
      <div>public CSSToXSLFOFilter</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html" shape="rect">java.util.Map</a>
userAgentParameters,</div>
      <div class="p"><a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLReader.html" shape="rect">XMLReader
parent</a></div>
      <div>) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter with <code>debug</code> set to
<code>false</code>.</p>

    <div class="method">
      <div>public CSSToXSLFOFilter</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet,</div>
      <div class="p"><a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLReader.html" shape="rect">XMLReader
parent</a></div>
      <div>) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter with an empty <code>userAgentParameters</code> map
and <code>debug</code> set to <code>false</code>.</p>

    <div class="method">
      <div>public CSSToXSLFOFilter</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl,</div>
      <div class="p"><a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLReader.html" shape="rect">XMLReader
parent</a></div>
      <div>) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter with <code>userAgentStyleSheet</code> set to
<code>null</code>, an empty <code>userAgentParameters</code> map
and <code>debug</code> set to <code>false</code>.</p>

    <div class="method">
      <div>public CSSToXSLFOFilter</div>
      <div>(</div>
      <div class="p"><a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLReader.html" shape="rect">XMLReader
parent</a></div>
      <div>) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter with <code>baseUrl</code> and
<code>userAgentStyleSheet</code> set to
<code>null</code>, an empty <code>userAgentParameters</code> map
and <code>debug</code> set to <code>false</code>.</p>

    <div class="method">
      <div>public CSSToXSLFOFilter</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html" shape="rect">java.util.Map</a>
userAgentParameters,</div>
      <div class="p">boolean debug</div>
      <div>) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter without a parent.</p>

    <div class="method">
      <div>public CSSToXSLFOFilter</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html" shape="rect">java.util.Map</a>
userAgentParameters</div>
      <div>) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter without a parent and <code>debug</code> set to
<code>false</code>.</p>

    <div class="method">
      <div>public CSSToXSLFOFilter</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet</div>
      <div>) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter without a parent, an empty
<code>userAgentParameters</code> map and <code>debug</code> set to
<code>false</code>.</p>

    <div class="method">
      <div>public CSSToXSLFOFilter(<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl) throws <a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter without a parent, <code>userAgentStyleSheet</code>
set to <code>null</code>, an empty <code>userAgentParameters</code> map and
<code>debug</code> set to <code>false</code>.</p>

    <div class="method">
      <div>public CSSToXSLFOFilter() throws
<a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Constructs the filter without a parent, <code>baseUrl</code> and
<code>userAgentStyleSheet</code> set to <code>null</code>, an empty
<code>userAgentParameters</code> map and <code>debug</code> set to
<code>false</code>.</p>

    <h4>Methods</h4>

    <div class="method">
      <div id="getBaseUrl">public <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
getBaseUrl()</div>
    </div>

    <p>Returns the base &url; of the filter. It is either set in a constructor
or with the <a href="#setBaseUrl" shape="rect"><code>setBaseUrl</code></a> method.</p>

    <div class="method">
      <div id="getParameters">public <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html" shape="rect">java.util.Map</a>
getParameters()</div>
    </div>

    <p>Returns the User Agent parameters of the filter. They are either set in
a constructor or with the <a href="#setUserAgentStyleSheet" shape="rect"><code>setUserAgentStyleSheet</code></a>
method.</p>

    <div class="method">
      <div id="getUserAgentStyleSheet">public <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
getUserAgentStyleSheet()</div>
    </div>

    <p>Returns the User Agent style sheet of the filter. It is either set in a
constructor or with the <a href="#setUserAgentStyleSheet" shape="rect"><code>setUserAgentStyleSheet</code></a>
method.</p>

    <div class="method">
      <div id="setBaseUrl">public void setBaseUrl(<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl)</div>
    </div>

    <p>Sets the base &url; of the filter. The base &url; is used to resolve
relative &url;s in the input document. See also <a href="#baseUrl" shape="rect"><code>baseUrl</code></a>.</p>

    <div class="method">
      <div id="setParameters">public void setParameters(<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html" shape="rect">java.util.Map</a>
parameters)</div>
    </div>

    <p>Sets the User Agent parameters of the filter. See also <a href="#userAgentParameters" shape="rect"><code>userAgentParameters</code></a>.</p>

    <div class="method">
      <div id="setUserAgentStyleSheet">public void setUserAgentStyleSheet(<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet)</div>
    </div>

    <p>Sets the User Agent style sheet of the filter. See also <a href="#userAgentStyleSheet" shape="rect"><code>userAgentStyleSheet</code></a>.</p>

    <h3 id="CSSToXSLFOException">be.re.css.CSSToXSLFOException</h3>

    <p>This class extends <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Exception.html" shape="rect">java.lang.Exception</a>.</p>

    <h4>Constructors</h4>

    <div class="method">
      <div>public CSSToXSLFOException(<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Exception.html" shape="rect">java.lang.Exception
e</a>)</div>
    </div>

    <p>This is just a wrapper around <code>e</code>.</p>

    <div class="method">
      <div>public CSSToXSLFOException(<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/String.html" shape="rect">java.lang.String
message</a>)</div>
    </div>

    <p>The parameter will be returned by the method <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Throwable.html#getMessage()" shape="rect"><code>getMessage</code></a>.</p>

    <h3 id="CSSToXSLFO">be.re.css.CSSToXSLFO</h3>

    <p>This class contains a few convenience methods with which an &xml; filter
set-up can be avoided, because they do it for you.</p>

    <h4>Methods</h4>

    <div class="method">
      <div>public static void convert</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.InputStream.html" shape="rect">java.io.InputStream</a>
in,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.OutputStream.html" shape="rect">java.io.OutputStream</a>
out,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
baseUrl,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
catalog,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html" shape="rect">java.util.Map</a>
userAgentParameters,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL[]</a>
preprocessors,</div>
      <div class="p">boolean validate,</div>
      <div class="p">boolean debug</div>
      <div>) throws <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.IOException.html" shape="rect">java.io.IOException</a>,
<a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <dl>
      <dt>in</dt>
      <dd>The input document. It must not be <code>null</code>.</dd>

      <dt>out</dt>
      <dd>The output document. It must not be <code>null</code>.</dd>

      <dt>baseUrl</dt>
      <dd>See <a href="#baseUrl" shape="rect"><code>baseUrl</code></a>.</dd>

      <dt>userAgentStyleSheet</dt>
      <dd>See <a href="#userAgentStyleSheet" shape="rect"><code>userAgentStyleSheet</code></a>.</dd>

      <dt>catalog</dt>
      <dd>The catalog used to resolve entities during &xml; parsing. It must
have the format defined by SGML Open Technical
Resolution <acronym>TR9401:1997</acronym>. Only the <q>PUBLIC</q> and
<q>SYSTEM</q> keywords are supported. It may be <code>null</code>.</dd>

      <dt>userAgentParameters</dt>
      <dd>See <a href="#userAgentParameters" shape="rect"><code>userAgentParameters</code></a>.</dd>

      <dt>preprocessors</dt>
      <dd>An array of &xslt; style sheets. The input goes through them in the
specified order and before the
<a href="#CSSToXSLFOFilter" shape="rect"><code>CSSToXSLFOFilter</code></a>.</dd>

      <dt>validate</dt>
      <dd>Turns on validation during &xml; parsing of the input document.</dd>

      <dt>debug</dt>
      <dd>See <a href="#debug" shape="rect"><code>debug</code></a>.</dd>
    </dl>

    <div class="method">
      <div>public static void convert</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.InputStream.html" shape="rect">java.io.InputStream</a>
in,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.OutputStream.html" shape="rect">java.io.OutputStream</a>
out,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html" shape="rect">java.net.URL</a>
userAgentStyleSheet</div>
      <div>) throws <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.IOException.html" shape="rect">java.io.IOException</a>,
<a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Calls the first variant of <code>convert</code> with
<code>baseUrl</code>, <code>catalog</code> and <code>preprocessors</code> set
to <code>null</code>, <code>validate</code> and <code>debug</code> set to false
and an empty <code>userAgentParameters</code> map.</p>

    <div class="method">
      <div>public static void convert</div>
      <div>(</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.InputStream.html" shape="rect">java.io.InputStream</a>
in,</div>
      <div class="p"><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.OutputStream.html" shape="rect">java.io.OutputStream</a>
out</div>
      <div>) throws <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io.IOException.html" shape="rect">java.io.IOException</a>,
<a href="#CSSToXSLFOException" shape="rect">CSSToXSLFOException</a></div>
    </div>

    <p>Calls the first variant of <code>convert</code> with
<code>baseUrl</code>, <code>userAgentStyleSheet</code>, <code>catalog</code> and
<code>preprocessors</code> set to <code>null</code>, <code>validate</code> and
<code>debug</code> set to false and an empty <code>userAgentParameters</code>
map.</p>

    <h2>Examples</h2>

    <p>Since <a href="#CSSToXSLFOFilter" shape="rect">CSSToXSLFOFilter</a> is derived from 
<a href="http://www.saxproject.org/apidoc/org/xml/sax/helpers/XMLFilterImpl.html" shape="rect">org.&#8203;xml.&#8203;sax.&#8203;helpers.&#8203;XMLFilterImpl.</a>,
it implements all &sax; event interfaces, as well as <a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLFilter.html" shape="rect">org.&#8203;xml.&#8203;sax.&#8203;XMLFilter</a>.
As a consequence, the filter can occur in input and output filter chains.</p>

    <h3>Example 1</h3>

    <p>The most straight-forward scenario is an application that reads the
input document from a file and that writes an &xslfo; document into another
file. For this we need an &xml; parser that can produce &sax; events. The
parser implements the <a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLReader.html" shape="rect">org.&#8203;xml.&#8203;sax.&#8203;XMLReader</a>
interface, so we can make it the parent of <a href="#CSSToXSLFOFilter" shape="rect">CSSToXSLFOFilter</a>.</p>

    <p>In order to create a parser, we first have to set up the parser factory
and make it namespace-aware. This happens at the lines 6 through 8. The filter
can now be created with the input document as the base &url; (in case any
relative &url;s need to be resolved) and an &xml; parser as its parent. This is
done at the lines 9 through 14.</p>

    <p>We now have to prepare the output part. We use an &xslt; transformer
without a style sheet to copy the &sax; events to the output. The transformer
must be in a form that accepts &sax; events. This is why a <a href="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/sax/TransformerHandler.html" shape="rect">javax.&#8203;xml.&#8203;transform.&#8203;sax.&#8203;TransformerHandler</a>
is created at lines 15 through 19. It implements the <a href="http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html" shape="rect">org.&#8203;xml.&#8203;sax.&#8203;ContentHandler</a>
interface. By giving it the output file as a result (lines 20 through 26), the
&sax; events are transformed in the &xml; syntax.</p>

    <p>The input and output parts can now be connected by setting the content
handler of the filter to the transformer handler (line 27). The whole chain is
then activated by calling the <code>parse</code> method, passing it the input
document in the form of a file. The filter will pass this call onto the parser,
which is its parent. The parser starts producing &sax; events that go through
the filter and into the transformer handler.</p>

    <pre xml:space="preserve"> 1 public class Example1
 2 {
 3   public static void
 4   main(String[] args) throws Exception
 5   {
 6     javax.xml.parsers.SAXParserFactory	factory =
 7       javax.xml.parsers.SAXParserFactory.newInstance();

 8     factory.setNamespaceAware(true);

 9     be.re.css.CSSToXSLFOFilter	filter =
10       new be.re.css.CSSToXSLFOFilter
11       (
12         new java.io.File(args[0]).toURL(), // base URL.
13         factory.newSAXParser().getXMLReader()
14       );

15     javax.xml.transform.sax.TransformerHandler	handler =
16       (
17         (javax.xml.transform.sax.SAXTransformerFactory)
18           javax.xml.transform.TransformerFactory.newInstance()
19       ).newTransformerHandler();

20     handler.setResult
21     (
22       new javax.xml.transform.stream.StreamResult
23       (
24         new java.io.File(args[1])
25       )
26     );

27     filter.setContentHandler(handler);

28     filter.parse
29     (
30       new org.xml.sax.InputSource
31       (
32         new java.io.FileInputStream(args[0])
33       )
34     );
35   }
36 }</pre>

    <h3>Example 2</h3>

    <p>A variation of the previous example is to perform the transformation of
the &sax; events coming out of the filter to &xml; syntax in another way. In
the previous example the parser had the control flow and the transformer acted
as a handler of &sax; events. We can also give the control flow to a
transformer that reads the input and copies it to the output, because we don't
give it any style sheet. We need to create a <a href="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/Transformer.html" shape="rect">javax.&#8203;xml.&#8203;transform.&#8203;Transformer</a>.
It is done at lines 15 through 17. The actual transformation is launched at
lines 18 through 32. For this to work, we have to wrap our filter in a <a href="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/sax/SAXSource.html" shape="rect">javax.&#8203;xml.&#8203;transform.&#8203;sax.&#8203;SAXSource</a>.
For the transformer it is as if it is going to call an &xml; parser.</p>

    <pre xml:space="preserve"> 1 public class Example2
 2 {
 3   public static void
 4   main(String[] args) throws Exception
 5   {
 6     javax.xml.parsers.SAXParserFactory	factory =
 7       javax.xml.parsers.SAXParserFactory.newInstance();

 8     factory.setNamespaceAware(true);

 9     be.re.css.CSSToXSLFOFilter	filter =
10       new be.re.css.CSSToXSLFOFilter
11       (
12         new java.io.File(args[0]).toURL(), // base URL.
13         factory.newSAXParser().getXMLReader()
14       );

15     javax.xml.transform.Transformer	transformer =
16       javax.xml.transform.TransformerFactory.newInstance().
17         newTransformer();

18     transformer.transform
19     (
20       new javax.xml.transform.sax.SAXSource
21       (
22         filter, // Acts as the XMLReader.
23         new org.xml.sax.InputSource
24         (
25           new java.io.FileInputStream(args[0])
26         )
27       ),
28       new javax.xml.transform.stream.StreamResult
29       (
30         new java.io.File(args[1])
31       )
32     );
33   }
34 }</pre>

    <h3>Example 3</h3>

    <p>This example shows how a pre-processing step can be added to the filter
chain. The input document is transformed by the pre-processor and the resulting
&sax; events go through the conversion filter. The pre-processor is created at
lines 9 through 13. This one does nothing, i.e. it lets the events go through
unmodified. In reality you would replace it with a class of your own.</p>

    <p>The pre-processor instead of the filter is now initialised with the
&xml; parser as its parent. The pre-processor will become the parent of the
filter, as shown at line 18. When the <code>parse</code> method is called, the
filter passes the call onto the pre-processor, which in turn passes it onto the
parser. The &sax; events produced by the parser will then flow through the
pre-processor, which in turn forwards them, possibly modified, to the
filter.</p>

    <pre xml:space="preserve"> 1 public class Example3
 2 {
 3   public static void
 4   main(String[] args) throws Exception
 5   {
 6     javax.xml.parsers.SAXParserFactory	factory =
 7       javax.xml.parsers.SAXParserFactory.newInstance();

 8     factory.setNamespaceAware(true);

 9     org.xml.sax.helpers.XMLFilterImpl	myPreprocessor =
10       new org.xml.sax.helpers.XMLFilterImpl
11       (
12         factory.newSAXParser().getXMLReader()
13       );

14     be.re.css.CSSToXSLFOFilter	filter =
15       new be.re.css.CSSToXSLFOFilter
16       (
17         new java.io.File(args[0]).toURL(), // base URL.
18         myPreprocessor
19       );

20     javax.xml.transform.sax.TransformerHandler	handler =
21       (
22         (javax.xml.transform.sax.SAXTransformerFactory)
23           javax.xml.transform.TransformerFactory.newInstance()
24       ).newTransformerHandler();

25     handler.setResult
26     (
27       new javax.xml.transform.stream.StreamResult
28       (
29         new java.io.File(args[1])
30       )
31     );

32     filter.setContentHandler(handler);

33     filter.parse
34     (
35       new org.xml.sax.InputSource
36       (
37         new java.io.FileInputStream(args[0])
38       )
39     );
40   }
41 }</pre>

    <h3>Example 4</h3>

    <p>The previous example can be modified in such a way that the
pre-processor is an &xslt; style sheet. From this style sheet a <a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLFilter.html" shape="rect">org.&#8203;xml.&#8203;sax.&#8203;XMLFilter</a>
must be made, because it will sit between the &xml; parser and the filter. This
is shown at lines 9 through 19. The transformer factory is re-used afterwards
to create also the output handler.</p>

    <pre xml:space="preserve"> 1 public class Example4
 2 {
 3   public static void
 4   main(String[] args) throws Exception
 5   {
 6     javax.xml.parsers.SAXParserFactory	factory =
 7       javax.xml.parsers.SAXParserFactory.newInstance();

 8     factory.setNamespaceAware(true);

 9     javax.xml.transform.sax.SAXTransformerFactory	trFactory =
10       (javax.xml.transform.sax.SAXTransformerFactory)
11         javax.xml.transform.TransformerFactory.newInstance();

12     org.xml.sax.XMLFilter	myPreprocessor =
13       trFactory.newXMLFilter
14       (
15         new javax.xml.transform.stream.StreamSource
16         (
17           new java.io.File(args[2])
18         )
19       );

20     myPreprocessor.setParent
21     (
22       factory.newSAXParser().getXMLReader()
23     );

24     be.re.css.CSSToXSLFOFilter	filter =
25       new be.re.css.CSSToXSLFOFilter
26       (
27         new java.io.File(args[0]).toURL(), // base URL.
28         myPreprocessor
29       );

30     javax.xml.transform.sax.TransformerHandler	handler =
31       trFactory.newTransformerHandler();

32     handler.setResult
33     (
34       new javax.xml.transform.stream.StreamResult
35       (
36         new java.io.File(args[1])
37       )
38     );

39     filter.setContentHandler(handler);

40     filter.parse
41     (
42       new org.xml.sax.InputSource
43       (
44         new java.io.FileInputStream(args[0])
45       )
46     );
47   }
48 }</pre>

    <h3>Example 5</h3>

    <p>In all previous examples we have been parsing an input document. In some
applications, however, the data might come from somewhere else. It is possible,
for example, to synthesize the &xml; from data that resides in the database. In
such a scenario our filter no longer has a parent but becomes the &sax; event
handler of some system method, <code>generateReport</code> in this example.<span class="footnote-reference" /><span class="footnote-body">Note
that a real system method would probably need more than just the filter to do
its work. It would therefore have more parameters.</span>
This system method has the control flow. It fetches the data and generates the
&sax; events. In the case the generated &xml; stream is not suitable for &css;
conversion, a pre-processor may be specified as the parent of the filter.</p>

    <pre xml:space="preserve"> 1 public class Example5
 2 {
 3   public static void
 4   main(String[] args) throws Exception
 5   {
 6     be.re.css.CSSToXSLFOFilter	filter =
 7       new be.re.css.CSSToXSLFOFilter();

 8     javax.xml.transform.sax.TransformerHandler	handler =
 9       (
10         (javax.xml.transform.sax.SAXTransformerFactory)
11           javax.xml.transform.TransformerFactory.newInstance()
12       ).newTransformerHandler();

13     handler.setResult
14     (
15       new javax.xml.transform.stream.StreamResult
16       (
17         new java.io.File(args[0])
18       )
19     );

20     filter.setContentHandler(handler);
21     generateReport(filter);
22   }

23   private static void
24   generateReport(org.xml.sax.ContentHandler handler)
25   {
26   }
27 }</pre>

    <h3>Example 6</h3>

    <p>It may be the case that you want to synthesize the &xml; stream in a
system method, which needs the control flow, but that the interface of your
&xslfo; formatter is such that it also needs the control flow. In other words,
the formatter is not available in the form of a &sax; event handler, but has
some method that must be called to perform the actual formatting. At lines 21
through 31 there a hypothetical example of such a formatter.</p>

    <p>To solve this control flow conflict you can create an adapter that
implements the <a href="http://www.saxproject.org/apidoc/org/xml/sax/XMLReader.html" shape="rect">org.&#8203;xml.&#8203;sax.&#8203;XMLReader</a>
interface. Instead of actually parsing some &xml; you let both
<code>parse</code> methods call your system method. The parameters the latter
needs are passed through the constructor of the adapter. When the formatter now
calls the <code>parse</code> method it really ends up calling the system
method, which synthesizes the &sax; events.</p>

    <pre xml:space="preserve"> 1 public class Example6
 2 {
 3   public static void
 4   main(String[] args) throws Exception
 5   {
 6     be.re.css.CSSToXSLFOFilter	filter =
 7       new be.re.css.CSSToXSLFOFilter
 8       (
 9         new MyReportGenerator(new Object())
10       );
11     MyXSLFOFormatter		myFormatter = new MyXSLFOFormatter();

12     myFormatter.format
13     (
14       new javax.xml.transform.sax.SAXSource(filter, null),
15       new java.io.FileOutputStream(args[0]));
16   }

17   private static void
18   generateReport(Object context)
19   {
20   }

21   public static class MyXSLFOFormatter
22   {
23     public void
24     format
25     (
26       javax.xml.transform.Source source,
27       java.io.OutputStream out
28     )
29     {
30     }
31   }

32   public static class MyReportGenerator
33     extends org.xml.sax.helpers.XMLFilterImpl
34   {
35     private Object	context;

36     public
37     MyReportGenerator(Object context)
38     {
39       this.context = context;
40     }

41     public void
42     parse(org.xml.sax.InputSource input)
43       throws org.xml.sax.SAXException, java.io.IOException
44     {
45       generateReport(context);
46     }

47     public void
48     parse(String systemId)
49       throws org.xml.sax.SAXException, java.io.IOException
50     {
51       generateReport(context);
52     }
53   }
54 }</pre>

    <div class="separator" />

    <h1>Some Techniques<span /></h1>

    <p>A few practical cases of formatting contructs, which are either more
advanced or not yet very common, are described in this chapter. Gradually, new
cases will be added. The chapter is some sort of <q>how to</q> section in the
user guide. The examples use &xhtml; as the input document language.</p>

    <h2>Customising List Labels With Markers</h2>

    <p>The genaration of the labels of an itemised list is somewhat fixed. It
depends on the value of the <code>list-style-type</code> property.<span class="footnote-reference" /><span class="footnote-body">The
<code>list-style-image</code> and <code>list-style-position</code> properties
are not supported by this tool.</span> Sometimes, however, more control is
required over how the labels look like. This can be achieved through
markers.</p>

    <p>Basically, you have to specify a <code>:before</code> pseudo element
with the display type <code>marker</code> in your style sheet for those
elements you have given the display type <code>list-item</code>. Strictly
speaking that display type is not needed, but if you are about to convert your
existing lists, those elements would have that display type.</p>

    <p>In the pseudo element you have control over the formatting of the label.
The only exception is that the <code>width</code> property must be fixed. The
tool doesn't support the automatic calculation of the required width. If your
style sheet doesn't specify a width, a default value will be used. In order to
not depend on this value, it is best to specify one.</p>

    <p>The following example is an ordered list with a nested ordered list in
the second item. We are going to change the numbering as well as the alignment
of the labels.</p>

    <pre xml:space="preserve">  &lt;ol>
    &lt;li>Item 1&lt;/li>
    &lt;li>Item 2
      &lt;ol>
        &lt;li>Subitem 1&lt;/li>
        &lt;li>Subitem 2&lt;/li>
        &lt;li>Subitem 3&lt;/li>
      &lt;/ol>
    &lt;/li>
    &lt;li>Item 3&lt;/li>
  &lt;/ol></pre>

    <p>In the style sheet we say that the <code>:before</code> pseudo element
of any <code>li</code> under a <code>ol</code>, no matter the level, is a
marker. In there, we increment the counter that is reset for each level of
<code>ol</code>. We also display it with the <code>lower-roman</code> counter
style instead of the default style (<code>decimal</code>). This style will show
the effect of the right alignment of the text inside the label. The
<code>marker-offset</code> property provides for a bit of space between the
label and the list item body.</p>

    <p>The <code>width</code> property deserves special attention. First of all
it defines the width of the labels. Since markers shouldn't influence the
positioning of the element they are attached to, the labels would stick out to
the left by the amount of the value of the <code>width</code> property. In
order to compensate this, we have to add a <code>margin-left</code> with the
same value to the list item itself.</p>

    <pre xml:space="preserve">  ol { counter-reset: list-counter; }
  
  ol li { margin-left: 2em; }
  
  ol li:before
  {
    content: counter(list-counter, lower-roman) ".";
    counter-increment: list-counter;
    display: marker;
    marker-offset: 0.5em;
    text-align: right;
    width: 2em;
  }</pre>

  <p>The rendered result would like this:</p>

  <ol class="example">
    <li>Item 1</li>
    <li>Item 2
      <ol class="example">
        <li>Subitem 1</li>
        <li>Subitem 2</li>
        <li>Subitem 3</li>
      </ol>
    </li>
    <li>Item 3</li>
  </ol>

  <h2 class="example">Making Section Numbers <q>Stick Out</q></h2>

  <p>Sometimes the text of the section titles must be aligned with the rest of
the material, at the left side for example. As consequence, if the titles also
have section numbers, those will stick out at the left side of the title, into
the margin, just like the title of the current section. This can be obtained by
specifying a <code>:before</code> pseudo element for the section titles with
the display type <code>marker</code>. Because markers shouldn't influence the
positioning of their associated element, the marker content is prepended. This
is the piece of style sheet you would need:</p>

  <pre xml:space="preserve">  h2:before
  {
    display: marker;
    marker-offset: 0.5em;
    padding-right: 0pt;
    text-align: right;
    width: 3em;
  }</pre>

  <h2>This Guide's Page Set-up</h2>

  <p>The page set-up of this guide is rather advanced and is therefore an
interesting practical case. The difficulty lies in specifying the static
regions if there are many kinds of pages and if for each of those the static
regions are different. i.e. very specific.</p>

  <p>In order to avoid an explosion of &css; property specifications for all
those regions, we can work in a sort of multidimensional way. This is possible
through the combination of two things. First, we have the &css; cascading
mechanism, which allows us to centralise common property specifications.
Second, the can make use of the fact that the <code>class</code> attribute is a
space-separated list of names. Because of this, an element can belong to
several classes. These are the static regions of this guide:</p>

  <pre xml:space="preserve">  &lt;div class="first top"/>
  &lt;div class="title first bottom"/>
  &lt;div class="title first top"/>
  &lt;div class="copy-right first bottom"/>
  &lt;div class="copy-right first top"/>
  &lt;div class="left bottom">&lt;span/>&lt;/div>
  &lt;div class="right bottom">&lt;span/>&lt;/div>
  &lt;div class="left top">&lt;span/>&lt;/div>
  &lt;div class="right top">&lt;span/>&lt;/div>
  &lt;div class="front left bottom">&lt;span/>&lt;/div>
  &lt;div class="front right bottom">&lt;span/>&lt;/div>
  &lt;div class="blank bottom"/>
  &lt;div class="blank top"/></pre>

  <p>Neither of them has a lot of content. It is all generated using the
<code>span</code> element as a hook. For the empty <code>div</code> elements no
content will be generated. You can see that all regions belong to more than one
class. The more classes they belong to, the more specific is the set of pages
they apply to. This is one dimension. The other is whether the static region is
a top or bottom region.</p>

  <p>The first region, for example, is a bottom region that applies only to the
first page of the named page sequence called <q>title</q>. This is expressed in
the style sheet as follows:</p>

  <pre xml:space="preserve">  div.title.first
  {
    page: first-title;
  }</pre>

  <p>The rule applies if <code>class</code> is <q>title</q> <i>and</i>
<q>first</q>. This is more specific then the following page assignment which
also occurs in the style sheet:</p>

  <pre xml:space="preserve">  div.first
  {
    page: first;
  }</pre>

  <p>Another example is the pair of bottom regions for left and right pages.
They apply for left and right pages, no matter the page sequence. For the
<q>front</q> page sequence, however, there is a more specific version. Making
it more specific is done by the two page assignments in the following style
sheet part. The style of the bottom region of the front part is a bit
different. It display the page numbers in lower Roman. The complete style is
obtained by cascading all the rules for the class <q>bottom</q>. The first two
rules define the style for all bottom regions and the last one overrides the
counter style.</p>

  <pre xml:space="preserve">  div.bottom
  {
    height: 3em;
    padding-top: 2em;
    region: bottom;
  }

  div.bottom > span:before
  {
    content: counter(page);
  }

  div.front.left
  {
    page: left-front;
  }

  div.front.right
  {
    page: right-front;
  }

  div.front.bottom > span:before
  {
    content: counter(page, lower-roman);
  }</pre>

  <p>For blank pages we want no static regions at all, at least not visually.
The presence of the top and bottom regions is defined generally through the
<code>div.top</code> and <code>div.bottom</code> rules. As a consequence, no
matter the page sequence, those static regions are always generated. All we
have to do now is making sure they don't contain anything. This is done by the
two empty regions with the <code>class</code> attribute set to <q>blank top</q>
and <q>blank bottom</q> respectively. Those regions are assigned to blank pages
with the following style sheet part:</p>

  <pre xml:space="preserve">  div.blank
  {
    page: blank;
  }</pre>

  <p>There is one more special construct left to discuss: the absence of static
top regions on the first page of a chapter. As with blank pages they are not
really absent. They are merely made empty. It is in fact the first region with
the classes <q>first</q> and <q>top</q>. This region is assigned to the
<code>first</code> pseudo page. All chapters are however in the named page
sequence <q>main</q>. If we do nothing only the first page of the first chapter
will have an empty top region. We therefore should toggle the <code>page</code>
property without adding extra pages. This can be achieved by inserting an empty
<code>div</code> element between the chapters with the class <q>separator</q>.
The page assignment for that class is <q>separator</q>. This named page is not
used for anything else. Since the element is empty no page sequence is
generated. The next <q>main</q> element, however, will start a new page
sequence.</p>

  <p>After the front matter not only the page number style changes to decimal,
but the page numbering is also reset. We can't just reset the <code>page</code>
counter in the <q>main</q> page context, because then the numbering would be
reset for each chapter. Instead, the style sheet defines a
<code>main-first</code> @page rule, which contains the same definitions as
<code>main</code> and a <code>page</code> counter reset on top of it. This page
is assigned to the first chapter only, using the <code>first-child</code>
pseudo-class on the <code>h1</code> element.</p>

  <h2>A Two-column Article</h2>

  <p>Many articles and papers are formatted in two column mode. The title,
abstract, authors, etc. are usually displayed across the two columns. With two
extension properties it is possible to do this. The <code>column-count</code>
should be set to <q>2</q> in the page context. The title material can be
wrapped in a block element for which the <code>column-span</code> property is
set to <q>all</q>.</p>

  <h2>Initial Capitals</h2>

  <p class="first-letter-example">A typographical effect that is often used are
initial capitals. It consists of making the first letter of an article or
chapter stand out by rendering it bigger and perhaps in another font and/or
colour. In &css; this is supported through the <code>:first-letter</code>
pseudo element, which is described in section 5.12.2 of
[<a href="#CSS2" shape="rect">&css2;</a>]. In &csstoxslfo; it is implemented with the
restriction that letter combinations, which are considered as one letter, are
not examined. In case you need that, you can always use the Unicode ligature
characters instead.</p>

  <p>The technique was applied to the previous paragraph using the piece of
style sheet below. Note the second deviation from the specification being the
usage of the property <code>vertical-align</code> while the <code>float</code>
property has the value <code>none</code>. It is allowed in &csstoxslfo; because
otherwise we have no control over the alignment of the first letter with the
lines next to it. This depends on the font and will always require some trial
and error in order to get it right. The values for the other properties are
obtained in the same way. In fact, for this special case, we work around the
normal way a glyph is layed out in a line.</p>

  <pre xml:space="preserve">  p:first-letter
  {
    font-family: serif-swash;
    font-size: 46pt;
    font-style: italic;
    float: left;
    line-height: 46pt;
    padding-right: 6pt;
    margin-bottom: -12pt;
    vertical-align: 9pt;
  }</pre>

  </div>


  <div class="back">

    <h1>Special Provisions for XHTML<span /></h1>

    <p>While the tool works for any &xml; vocabulary it does a number of
things for &xhtml; specifically. Other vocabularies may be supported in the same
way at some later stage. The items are the following:</p>

    <ul>
      <li>Non-&css; presentational hints are translated to the corresponding
&css; rules, as prescribed in section 6.4.4 of
[<a href="#CSS2" shape="rect">&css2;</a>];</li>

      <li>The <code>lang</code> attribute is honored;</li>

      <li>Hyperlinks are recognized and translated in &xslfo; links;</li>

      <li>The <code>link</code> element can be used to specify external style
sheets;</li>

      <li>Style sheets can be embedded with the <code>style</code>
element;</li>

      <li>The <code>style</code> attribute is honored;</li>

      <li>The <code>img</code> element is interpreted and processed;</li>

      <li>The <code>html-header-mark</code> user agent parameter is
available;</li>

      <li>There is a user agent style sheet for &xhtml; that cascades against
the one in appendix A of [<a href="#CSS2" shape="rect">&css2;</a>].</li>
    </ul>

    <div class="separator" />

    <h1>The User Agent Style Sheet<span /></h1>

    <h2>XHTML</h2>

    <pre style="page-break-inside: auto" xml:space="preserve">@import "xhtml.css";
@namespace url(http://www.w3.org/1999/xhtml);

@media print
{
  a[href]
  {
    color: blue;
    link: attr(href);
    text-decoration: none;
  }

  a[name]
  {
    anchor: name;
  }

  blockquote, dl, ol, p, ul
  {
    margin: 0.83em 0pt;
  }

  blockquote
  {
    margin-left: 3em;
    margin-right: 3em;
  }

  body
  {
    font-family: serif;
    padding: 0pt;
    region: body;
  }

  body:lang(da)
  {
    quotes: "\00BB" "\00AB";
  }

  body:lang(de-DE), body:lang(de-AT)
  {
    quotes: "\201E" "\201C" "\201A" "\2018"
  }

  body, body:lang(en), body:lang(es)
  {
    quotes: "\201C" "\201D" "\2018" "\2019";
  }

  body:lang(fr)
  {
    quotes: "\00AB " " \00BB" "\2039 " " \203A";
  }

  body:lang(it)
  {
    quotes: "\00AB " " \00BB";
  }

  body:lang(nl)
  {
    quotes: "\201D" "\201D" "\2019" "\2019";
  }

  body:lang(no), bodylang:(pt), body:lang(de-CH)
  {
    quotes: "\00AB" "\00BB" "\2039" "\203A"
  }

  body:lang(sv)
  {
    quotes: "\00BB" "\00BB";
  }

  caption
  {
    margin: 0.5em 0pt;
  }

  dt
  {
    page-break-after: avoid;
  }

  h1
  {
    font-size: 1.6em;
    margin-bottom: 0.7em;
    margin-top: 1.4em;
  }

  h2
  {
    font-size: 1.3em;
    margin-bottom: 0.6em;
    margin-top: 1.2em;
  }

  h3
  {
    font-size: 1.1em;
  }

  h3, h4
  {
    margin-bottom: 0.5em;
    margin-top: 1em;
  }

  h1, h2, h3, h4, h5, h6
  {
    hyphenate: false;
  }

  hr
  {
    border: 0.1pt solid;
  }

  img
  {
    content-height: scale-to-fit;
    content-width: scale-to-fit;
    display: graphic;
    scaling: uniform;
    src: attr(src);
  }

  li
  {
    margin-bottom: 0.8em;
    margin-top: 0.8em;
  }

  li p, li blockquote, li dl, li ol, li ul
  {
    margin-bottom: 0.5em;
    margin-top: 0.5em;
  }

  li li
  {
    margin-bottom: 0.5em;
    margin-top: 0.5em;
  }

  li li p, li li blockquote, li li dl, li li ol, li li ul
  {
    margin-bottom: 0.3em;
    margin-top: 0.3em;
  }

  li li li
  {
    margin-bottom: 0.4em;
    margin-top: 0.4em;
  }

  li li li p, li li li blockquote, li li li dl, li li li ol,
    li li li ul
  {
    margin-bottom: 0.3em;
    margin-top: 0.3em;
  }

  li, p
  {
    text-align: justify;
  }

  pre
  {
    font-size: 0.85em;
  }

  ul
  {
    list-style-type: disc;
  }

  ol li ul, ul li ul
  {
    list-style-type: circle;
  }

  ol li ol li ul, ol li ul li ul, ul li ol li ul, ul li ul li ul
  {
    list-style-type: square;
  }

  q:after
  {
    content: close-quote;
  }

  q:before
  {
    content: open-quote;
  }

  script
  {
    display: none;
  }

  span.section-number
  {
    padding-right: 1em;
  }
}</pre>

    <h2 style="page-break-before: always">DeltaXML</h2>

    <pre style="page-break-inside: auto" xml:space="preserve">@namespace deltaxml
  url(http://www.deltaxml.com/ns/well-formed-delta-v1);

@media print
{
  deltaxml|PCDATAnew, deltaxml|PCDATAold
  {
    display: inline;
  }

  deltaxml|exchange, deltaxml|new, deltaxml|old
  {
    display: wrapper;
  }

  *[deltaxml|delta="add"], deltaxml|PCDATAnew, deltaxml|new
  {
    text-decoration: underline;
  }

  *[deltaxml|delta="delete"], deltaxml|PCDATAold, deltaxml|old
  {
    text-decoration: line-through;
  }

  *[deltaxml|delta="add"]:before, deltaxml|PCDATAnew:before,
    deltaxml|new, *[deltaxml|delta="delete"]:before,
    deltaxml|PCDATAold:before, deltaxml|old
  {
    change-bar-class: changed;
    change-bar-placement: alternate;
    change-bar-style: solid;
    change-bar-width: 0.2pt;
  }

  *[deltaxml|delta="add"]:after, deltaxml|PCDATAnew:after,
    *[deltaxml|delta="delete"]:after, deltaxml|PCDATAold:after
  {
    change-bar-class: changed;
  }
}</pre>

    <h2 style="page-break-before: always">XLink</h2>

    <pre style="page-break-inside: auto" xml:space="preserve">@namespace xlink url(http://www.w3.org/1999/xlink);

@media print
{
  *[xlink|href]
  {
    link: attr(xlink|href);
  }
}</pre>

    <div class="separator" />

    <h1>References<span /></h1>

    <dl>
      <dt id="CSS2">[&css2;]</dt>
      <dd><q><span class="title">Cascading Style Sheets, level 2, CSS2
Specification</span></q>, W3C
Recommendation 12 May 1998, Bert Bos, H&#229;kon Wium Lie, Chris Lilley, Ian
Jacobs,
<a href="http://www.w3.org/TR/1998/REC-CSS2-19980512" shape="rect">http://www.w3.org/&#8203;TR/&#8203;1998/&#8203;REC-CSS2-19980512</a>.</dd>

      <dt id="CSS3G">[<acronym>CSS3G</acronym>]</dt>
      <dd><q><span class="title">CSS3 Generated and Replaced Content
Module</span></q>, W3C Working Draft 14 May 2003, Ian Hickson,
<a href="http://www.w3.org/TR/2003/WD-css3-content-20030514" shape="rect">http://www.w3.org/&#8203;TR/&#8203;2003/&#8203;WD-css3-content-20030514</a>.</dd>

      <dt id="CSS3L">[<acronym>CSS3L</acronym>]</dt>
      <dd><q><span class="title">CSS3 module: Lists</span></q>, W3C Working
Draft 7 November 2002, Ian Hickson, Tantek &#199;elik,
<a href="http://www.w3.org/TR/2002/WD-css3-lists-20021107" shape="rect">http://www.w3.org/&#8203;TR/&#8203;2004/&#8203;WD-css3-lists-20021107</a>.</dd>

      <dt id="CSS3P">[<acronym>CSS3P</acronym>]</dt>
      <dd><q><span class="title">CSS3 Module: Paged Media</span></q>, W3C
Working Draft 10 October 2006, H&#229;kon Wium Lie, Melinda Grant,
<a href="http://www.w3.org/TR/2006/WD-css3-page-20061010" shape="rect">http://www.w3.org/&#8203;TR/&#8203;2006/&#8203;WD-css3-page-20061010</a>.</dd>

      <dt id="CSS3S">[<acronym>CSS3S</acronym>]</dt>
      <dd><q><span class="title">CSS3 Selectors</span></q>, W3C Working Draft 15
December 2005, Daniel Glazman, Tantek
&#199;elik, Ian Hickson, Peter Linss, John Williams, <a href="http://www.w3.org/TR/2005/WD-css3-selectors-20051215" shape="rect">http://www.w3.org/&#8203;TR/&#8203;2005/&#8203;WD-css3-selectors-20051215</a>.</dd>

      <dt id="DELTA">[<acronym>DELTA</acronym>]</dt>
      <dd><q><span class="title">How DeltaXML Represents Changes to XML
Files</span></q>, DeltaXML Ltd., <a href="http://www.deltaxml.com/library/how-deltaxml-represents-changes.html" shape="rect">http://www.deltaxml.com/&#8203;library/&#8203;how-deltaxml-represents-changes.html</a>.</dd>

      <dt id="NAMES">[<acronym>NAMES</acronym>]</dt>
      <dd><q><span class="title">Namespaces in XML</span></q>, W3C
Recommendation 14 January 1999, Tim Bray, Dave Hollander, Andrew Layman, <a href="http://www.w3.org/TR/REC-xml-names/" shape="rect">http://www.w3.org/&#8203;TR/&#8203;REC-xml-names/</a>.</dd>

      <dt id="XHTML">[&xhtml;]</dt>
      <dd><q><span class="title">XHTML&#8482; 1.0 The Extensible HyperText
Markup Language (Second Edition)</span></q>, W3C Recommendation 26 January 2000,
revised 1 August 2002,
<a href="http://www.w3.org/TR/2002/REC-xhtml1-20020801" shape="rect">http://www.w3.org/&#8203;TR/&#8203;2002/&#8203;REC-xhtml1-20020801</a>.</dd>

      <dt id="XLINK">[<acronym>XLINK</acronym>]</dt>
      <dd><q><span class="title">XML Linking Language (XLink) Version
1.0</span></q>, W3C Recommendation 27 June 2001, Steve DeRose, Eve Maler, David
Orchard, <a href="http://www.w3.org/TR/2001/REC-xlink-20010627" shape="rect">http://www.w3.org/&#8203;TR/&#8203;2001/&#8203;REC-xlink-20010627</a>.</dd>

      <dt id="XSLFO">[&xslfo;]</dt>
      <dd><q><span class="title">Extensible Stylesheet Language (XSL), Version
1.0</span></q>, W3C
Recommendation 15 October 2001, Sharon Adler, Anders Berglund, Jeff Caruso,
Stephen Deach, Tony Graham, Paul Grosso, Eduardo Gutentag, Alex Milowski, Scott
Parnell, Jeremy Richman, Steve Zilles,
<a href="http://www.w3.org/TR/2001/REC-xsl-20011015/" shape="rect">http://www.w3.org/&#8203;TR/&#8203;2001/&#8203;REC-xsl-20011015/</a>.</dd>

      <dt id="XSLFO11">[<acronym>XSL-FO11</acronym>]</dt>
      <dd><q><span class="title">Extensible Stylesheet Language (XSL), Version
1.1</span></q>, W3C Recommendation 05 December 2006, Anders Berglund,
<a href="http://www.w3.org/TR/2006/REC-xsl11-20061205/" shape="rect">http://www.w3.org/&#8203;TR/&#8203;2006/&#8203;REC-xsl11-20061205/</a>.</dd>
    </dl>

    </div>
  </body>
</html>
